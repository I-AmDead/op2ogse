-- -*- mode: lua; coding: windows-1251-dos -*-

local opt_helmet_effector = false

local hud_pp = {
  [ "hud_exo"  ] = "helm_exo.ppe",
  [ "hud_gaz"  ] = "helm_respirator.ppe",
  [ "hud_merc" ] = "helm_battle.ppe",
  [ "hud_mil"  ] = "helm_hardhat.ppe",
  [ "hud_nano" ] = "helm_scientific.ppe",
  [ "hud_sci"  ] = "helm_scientific.ppe",
}

local nlc7_hud_sound_t = {
  [ "hud_exo"  ] = "mil",
  [ "hud_gaz"  ] = "gas",
  [ "hud_merc" ] = "gas",
  [ "hud_mil"  ] = "mil",
  [ "hud_nano" ] = "scn",
  [ "hud_sci"  ] = "scn",
}

local nlc7_act_breath = {
  [ "wht" ] = {
    { "actor\\nlc7\\without_mask_1_",  2, 1.2 },
    { "actor\\nlc7\\without_mask_2_",  2, 1.1 },
    { "actor\\nlc7\\without_mask_3_",  6, 1   },
  },
  [ "gas" ] = {
    { "actor\\nlc7\\gas_mask_1_",      6, 1.0 },
    { "actor\\nlc7\\gas_mask_2_",     10, 0.9 },
    { "actor\\nlc7\\gas_mask_3_",     10, 0.8 },
  },
  [ "mil" ] = {
    { "actor\\nlc7\\exo_mask_1_",      9, 1.5 },
    { "actor\\nlc7\\exo_mask_2_",      9, 1.3 },
    { "actor\\nlc7\\exo_mask_3_",      8, 1.1 },
  },
  [ "scn" ] = {
    { "actor\\nlc7\\scient_mask_1_",   2, 1.6 },
    { "actor\\nlc7\\scient_mask_2_",   2, 1.4 },
    { "actor\\nlc7\\scient_mask_3_",   6, 1.2 },
  },
}

local wpn_fx  = dsh_hud_fx_data.wpn_fx
local hud_fxs = dsh_hud_fx_data.hud_fxs
local active_hud_fx_queue, active_hud_fx_sect, active_fx_snd


function attach( sm )
  sm:subscribe({
    signal = "on_actor_before_helmet_off", fun = this.on_helmet_off
  })
  sm:subscribe({ signal = "on_actor_helmet_on", fun = this.on_helmet_on })
  sm:subscribe({
    signal = "on_actor_weapon_fire", fun = this.on_actor_weapon_fire
  })
  sm:subscribe({ signal = "on_first_update", fun = this.startup_helmet })
  sm:subscribe({ signal = "on_update", fun = this.on_update_heart   })
  sm:subscribe({ signal = "on_use",    fun = this.on_use            })
end


function on_update_heart()
  ogse_signals.get_mgr():reschedule( 113 )
  if not db.actor:alive() then return end
  nlc7_actor_heart()
end


local startup = true
function startup_helmet()
  local outfit = db.actor:get_current_outfit()
  if
    not (
      outfit
      and get_bool( outfit:section(), "dynamic_hud_enable", false )
    )
  then
    startup = false
  end
end


function force_on_helmet()
  startup = false
end


function add_helmet_effector( mode )
  level.remove_pp_effector( 3000 )
  if mode then
    local pp = get_cur_helmet_pp()
    if pp then
      level.add_pp_effector( pp, 3000, true )
    end
  end
end


function get_cur_helmet_pp()
  local hud, helmet = ogse_dynamic_hud.get_current_helmet()
  if helmet then
    return hud_pp[ helmet ]
  end
end


local weapon_lock, waiting_for_helmet = false
function helmet_on_off_effect( delay, mode )
  if not weapon_lock then
    bind_stalker.hide_weapon( 1000 )
  end
  dsh.rt_timeout( ( delay or 2000 ), function()
    ogse_signals.get_mgr():call( "on_helmet_on_off_done", mode )
    if not weapon_lock then
      bind_stalker.restore_weapon()
    end
    if waiting_for_helmet then
      local t = waiting_for_helmet
      waiting_for_helmet = nil
      helmet_hud_fx_done( t )
    end
  end )
end


local cached_wpn = {}
function get_wpn_params( sect )
  if not cached_wpn[ sect ] then
    local t = {}
    t.wpn_fx = get_string( sect, "dsh_hud_fx.wpn_fx" )
    t.wpn_fx_creep = get_string( sect, "dsh_hud_fx.wpn_fx_creep" )
    cached_wpn[ sect ] = t
  end
  return cached_wpn[ sect ]
end


function on_actor_weapon_fire( wpn )
  local aobj = get_actor_obj()
  if aobj:is_actor_creep() then return end
  local wpn_m  = wpn:get_weapon_m()
  if not ( wpn_m and wpn_m:canApplyShootEffector() ) then return end
  local shot_n = wpn_m.shot_num
  if wpn_m:canApplyShootEffectorStart() then
    shot_n = shot_n - wpn_m.shoot_effector_start
  end
  local params
  local cur_wpn = dsh_wpn.get_wpn_info( wpn )
  if cur_wpn.gl_mode then
    if cur_wpn.gl_name then
      params = get_wpn_params( cur_wpn.gl_name )
    else
      return
    end
  else
    params = get_wpn_params( wpn:section() )
  end
  local sect
  if aobj:is_actor_crouch() then
    sect = params.wpn_fx_creep or params.wpn_fx
  else
    sect = params.wpn_fx
  end
  if not ( sect and wpn_fx[ sect ] ) then return end

  local anims = {}
  local s     = wpn_fx[ sect ].s
  local sc    = table.getn( s )

  if sc > 1 then
    if wpn_fx[ sect ].r == 1 then
      s = s[ math.random( table.getn( s ) ) ]
    elseif wpn_fx[ sect ].r == 2 then
      if shot_n == 1 then
        s = s[ 1 ]
      else
        s = s[ math.random( 2, table.getn( s ) ) ]
      end
    else
      sc = ( shot_n <= sc ) and shot_n
        or ( sc > 2 and math.random( sc - 1, sc ) )
        or sc
      s  = s[ sc ]
    end
  else
    s = s[ 1 ]
  end

  local ammo_r = 1
  local fov_r  = ammo_r * ( zoom_mode() and 0.13 or 1 )
  for i, v in ipairs( wpn_fx[ sect ].e ) do
    cnt, r = math.modf( v[ 1 ] * fov_r )
    if r ~= 0 and cnt > 4 then -- fmb
      cnt = cnt - cnt * math.random( 0, r * 100 ) / 100 -- fmb
      cnt, r = math.modf( cnt )
    end
    if r ~= 0 and math.random() < r then
      cnt = cnt + 1
    end
    if cnt > 0 then
      table.insert( anims, {
        e = i, d = v[ 2 ] or math.random( 0, 1 ), c = cnt
      })
    end
  end

  for i, a in ipairs( anims ) do
    local n = string.format( [[shoot\s%s_e%s_%s.anm]], s, a.e, a.d )
    for ii = 1, a.c do
      level.add_cam_effector( n, math.random( 5000, 8000 ), false, "" )
    end
  end

  for k, v in pairs( wpn_fx[ sect ].p ) do
    local n   = string.format( [[shoot\%s_s%s.ppe]], k, s )
    local eid = math.random( 5000, 8000 )
    level.add_pp_effector( n, eid, false )
    if v > 0 then
      level.set_pp_effector_factor( eid, v )
    end
  end
end


local delt   = 0
local delt_h = 0

function nlc7_actor_heart( helmet )
  local npc = db.actor
  if not npc then return end
  local hb = npc.health
  if hb <= 0 or not npc:alive() then return end
  local time_curr = time_global()
  local time_delt = 0
  local step      = 1
  if hb < 0.3 then
    time_delt = time_curr - delt_h
    if time_delt >= math.log( hb * 200 ) * 200 then
      if     hb < 0.05 then
        step = 3
      elseif hb < 0.15 then
        step = 2
      else
        step = 1
      end
      local snd_fname = "actor\\nlc7\\heartbeat_" .. step .. "_" .. math.random( 4 )
      local snd = xr_sound.get_safe_sound_object( snd_fname )
      snd.volume = 1.5 - 5 * hb
      snd:play( db.actor, 0, sound_object.s2d )
      delt_h = time_curr
    end
  end
  local r_h = npc.power
  local hud, helmet = ogse_dynamic_hud.get_current_helmet()
  local tip = helmet
    and ( nlc7_hud_sound_t[ helmet ] or "wht" )
    or "wht"
  if r_h < 0.79 then
    time_delt = time_curr - delt
    if time_delt >= r_h * 1500 + 800 then
      if     r_h < 0.25 then
        step = 3
      elseif r_h < 0.5  then
        step = 2
      else
        step = 1
      end
      local snd_fname = nlc7_act_breath[ tip ][ step ][ 1 ]
        .. math.random( nlc7_act_breath[ tip ][ step ][ 2 ] )
      local snd = xr_sound.get_safe_sound_object( snd_fname )
      snd.volume = 2.5 - nlc7_act_breath[ tip ][ step ][ 3 ] - r_h
      snd:play( db.actor, 0, sound_object.s2d )
      delt = time_curr
    end
  end
end


function on_helmet_off()
  if opt_helmet_effector then
    add_helmet_effector( false )
  end
  if startup then
    startup = false
  else
    helmet_on_off_effect( 3500, false )
    local hud, helmet = ogse_dynamic_hud.get_current_helmet()
    if helmet then
      local tip = helmet
        and ( nlc7_hud_sound_t[ helmet ] or "wht" )
        or "wht"
      local snd_fname = "device\\masks\\" .. tip .. "_off"
      local snd = xr_sound.get_safe_sound_object( snd_fname )
      dsh.rt_timeout( 50, function()
        snd:play_no_feedback(
          db.actor, sound_object.s2d, 0, vector():set( 0, 0, 0 ), 0.5
        )
      end )
    end
  end
end


function on_helmet_on()
  if opt_helmet_effector then
    add_helmet_effector( true )
  end
  if startup then
    startup = false
  else
    helmet_on_off_effect( 1500, true )
    local hud, helmet = ogse_dynamic_hud.get_current_helmet()
    if helmet then
      local tip = helmet
        and ( nlc7_hud_sound_t[ helmet ] or "wht" )
        or "wht"
      local snd_fname = "device\\masks\\" .. tip .. "_on"
      local snd = xr_sound.get_safe_sound_object( snd_fname )
      snd:play_no_feedback(
        db.actor, sound_object.s2d, 0, vector():set( 0, 0, 0 ), 0.5
      )
    end
  end
end


local active_helmet
local hud_fx_lock = false

function helmet_hud_fx_off( t )
  level.disable_input()
  level.hide_indicators()
  bind_stalker.hide_weapon( 1000 )
  hud_fx_lock = true
  local hud, helmet = ogse_dynamic_hud.get_current_helmet()
  if helmet then
    active_helmet      = helmet
    weapon_lock        = true
    waiting_for_helmet = t
    ogse_dynamic_hud.helmet_on_off()
  else
    helmet_hud_fx_done( t )
  end
end


function helmet_hud_fx_on( t )
  hud_fx_lock = false
  level.show_indicators()
  if active_helmet then
    active_helmet      = nil
    weapon_lock        = true
    waiting_for_helmet = t
    ogse_dynamic_hud.helmet_on_off()
  else
    helmet_hud_fx_done( t )
  end
end


function helmet_hud_fx_done( t )
  weapon_lock = false
  if not hud_fx_lock then
    bind_stalker.restore_weapon()
    level.enable_input()
  end
  process_fx_next( nil, t )
end


local active_fx_t
function on_use( obj )
  if has_alife_info( "biznes_remove_special_item" ) then return end
  local sect = obj:section()
  local fx   = get_string( sect, "dsh_hud_fx.fx" )
  if fx then
    if
      get_bool( sect, "dsh_medkit.dsh_hud_fx", false )
      and db.actor:dont_has_info( "ui_inventory" )
    then
      fx = "use_sound"
    end
  end
  if fx then
    run_fx(
      obj:section(), fx, nil,
      {
        [ "condition" ] = obj:condition(),
        [ "section"   ] = obj:section(),
      }
    )
  end
end


function run_fx( sect, fx, tail, args )
  ASSERT( hud_fxs[ fx ], "unknown fx for %s", sect )
  if active_fx_t then
    active_fx_t:stop()
    active_fx_t = nil
  end
  if active_fx_snd then
    if active_fx_snd:playing() then
      active_fx_snd:stop()
    end
    active_fx_snd = nil
  end
  active_hud_fx_queue = {}
  for _, item in ipairs( hud_fxs[ fx ] ) do
    table.insert( active_hud_fx_queue, item )
  end
  if tail then
    for _, item in ipairs( tail ) do
      table.insert( active_hud_fx_queue, item )
    end
  end
  active_hud_fx_sect = sect
  process_fx_next( nil, ( args or {} ) )
end


function is_active_hud_fx_queue()
  return active_hud_fx_queue and table.getn( active_hud_fx_queue ) > 0
end


function process_fx_next( timeout, t )
  if is_active_hud_fx_queue() then
    local item = table.remove( active_hud_fx_queue, 1 )
    local func = item.func
      or ( item.use_sound and this.fx_use_sound )
    ASSERT( func, "can't find func for %s", active_hud_fx_sect )
    if item.timeout then timeout = item.timeout end
    if timeout and timeout > 0 then
      active_fx_t = dsh.rt_timeout( timeout, function()
        local timeout, stop = func( item, t )
        if item.next ~= false and not stop then
          process_fx_next( timeout, t )
        end
      end )
    else
      active_fx_t = nil
      local timeout, stop = func( item, t )
      if item.next ~= false and not stop then
        process_fx_next( timeout, t )
      end
    end
  else
    active_fx_t         = nil
    active_hud_fx_queue = nil
    active_hud_fx_sect  = nil
  end
end


function fx_use_sound( item )
  local use_sound
  if item.snd_name then
    if type( item.snd_name ) == "function" then
      use_sound = item.snd_name()
    else
      use_sound = item.snd_name
    end
  end
  if not use_sound then
    use_sound = get_string( active_hud_fx_sect, "dsh_hud_fx.use_sound" )
  end
  ASSERT( use_sound, "use_sound not found for %s", active_hud_fx_sect )
  if active_fx_snd and active_fx_snd:playing() then
    active_fx_snd:stop()
  end
  local snd_names = parse_names( use_sound )
  active_fx_snd   = xr_sound.get_safe_sound_object(
    snd_names[ math.random( table.getn( snd_names ) ) ]
  )
  active_fx_snd:play( db.actor, 0, sound_object.s2d )
  return active_fx_snd:length()
end


function fx_use_dsh_medkit( cond )
  dsh_medkit.apply_item( active_hud_fx_sect, cond )
end


function close_inventory()
  if db.actor:has_info( "ui_inventory" ) and level.main_input_receiver() then
    level.start_stop_menu( level.main_input_receiver(), true )
  end
end


function respawn_item( sect, cond )
  local sobj = ogse.spawn_item_in_inv( sect )
  if cond < 1 then
    level.client_spawn_manager():add(
      sobj.id, -1, function( id, obj )
        obj:set_condition( cond )
      end
    )
  end
end


function run_fx_on_update( sect, fx, tail, args )
  dsh.rt_exec_on_update(
    function() run_fx( sect, fx, tail, args ) end
  )
end
