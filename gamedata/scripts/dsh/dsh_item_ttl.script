-- -*- mode: lua; coding: windows-1251-dos -*-

local def_pause =   1      -- не чаще каждого игрового часа
local def_ttl   = 168      -- время жизни по умолчания (часов)
local fast_ttl  =  12      -- ускоренная порча (на земле и в трупиках)


function attach( sm )
  sm:subscribe(
    { signal = "on_actor_before_use", fun = this.on_actor_before_use }
  )
  sm:subscribe({ signal = "on_drop",  fun = this.on_drop  })
  sm:subscribe({ signal = "on_sleep_finished", fun = this.on_sleep_finished })
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
end


function on_spawn()
  process_ttl()
end


function process_ttl( force )
  local last_time = dsh.unpack_time(
    ogse.load_var_safe( "dsh_item_ttl.last_time" )
  )
  local dt
  if last_time then
    dt = game.get_game_time():diffSec( last_time )
  else
    dt = def_pause * 3600
  end
  if dt < def_pause * 3600 and not force then
    log2( "[%s]: is not ready: %s < %s", script_name(), dt, def_pause * 3600 )
    return
  end
  local pt = profile_timer()
  pt:start()
  local keep_cnt, release_cnt = 0, 0
  dsh_alife.iterate_items(
    function( sobj )
      local parent = get_parent_info( sobj.parent_id )
      if parent.is_trader then return true end
      local ttl = get_ttl_info( sobj:section_name() )
      if
        ttl.ttl
        and (
          sobj.parent_id ~= 65535
          or dsh.actor_was_here( object_level_name( sobj ) )
        )
      then
        local iitem = sobj:get_inventory_item()
        ASSERT(
          iitem,
          "[%s]: %s: get_inventory_item() == nil",
          script_name(), sobj:name()
        )
        local cond
        local obj = level.object_by_id( sobj.id )
        if obj then
          cond = obj:condition()
        else
          cond = iitem.item_condition
        end
        if cond > 0 then
          local ttl = parent.is_fast and ttl.fast_ttl or ttl.def_ttl
          local dec = dt / ttl
          if cond > dec then
            cond = iitem.item_condition - dec
          else
            cond = 0
          end
          if obj then
            obj:set_condition( cond )
          else
            iitem.item_condition = cond
          end
          if cond > 0 or parent.keep_zero then
            keep_cnt = keep_cnt + 1
          else
            dsh_alife.release( sobj )
            release_cnt = release_cnt + 1
          end
        elseif not parent.keep_zero then
          dsh_alife.release( sobj )
          release_cnt = release_cnt + 1
        end
      end
    end
  )
  ogse.save_var(
    "dsh_item_ttl.last_time", { game.get_game_time():get() }, "time"
  )
  pt:stop()
  log2(
    "[%s]: %s/%s items processes: %s",
    script_name(), release_cnt, keep_cnt, pt:time()
  )
end


function on_sleep_finished( sleep_time )
  process_ttl( true )
end


local cached_parent_info = {}
function get_parent_info( id )
  if not cached_parent_info[ id ] then
    local t = {}
    cached_parent_info[ id ] = t
    if id == db.actor:id() then
      t.fast      = false
      t.is_trader = false
      t.keep_zero = true
    elseif id == 65535 then
      t.fast      = true
      t.is_trader = false
      t.keep_zero = false
    else
      local sobj = alife():object( id )
      ASSERT( sobj, "[%s]: sobj %s not found", script_name, id )
      if sobj:clsid() == clsid.script_trader then
        t.fast      = false
        t.is_trader = true
        t.keep_zero = false
      elseif IsInventoryBox( sobj ) then
        t.fast      = false
        t.is_trader = not dsh.actor_was_here( object_level_name( sobj ) )
        t.keep_zero = true
      elseif IsStalker( sobj ) then
        t.fast      = sobj:community() == "zombied" or not sobj:alive()
        t.is_trader = amk_offline_alife.is_trader( sobj )
          or sobj:get_job_online() == false
          or not sobj:can_be_spawned()
        t.keep_zero = false
      else
        ASSERT(
          IsMonster( sobj ),
          "[%s]: unexpected creature: %s", script_name(), sobj:name()
        )
        t.fast      = not sobj:alive()
        t.is_trader = sobj:alive()
        t.keep_zero = false
      end
    end
  end
  return cached_parent_info[ id ]
end


local cached_ttl_info = {}
function get_ttl_info( sect )
  if not cached_ttl_info[ sect ] then
    local t = {}
    cached_ttl_info[ sect ] = t
    t.def_ttl  = get_float( sect, "dsh_item_ttl.def_ttl",  def_ttl  ) * 3600
    t.fast_ttl = get_float( sect, "dsh_item_ttl.fast_ttl", fast_ttl ) * 3600
    t.ttl      = get_bool( sect, "dsh_item_ttl.ttl", false )
  end
  return cached_ttl_info[ sect ]
end


function on_actor_before_use( obj )
  local ttl = get_ttl_info( obj:section() )
  if ttl.ttl and obj:condition() == 0 then
    zero_all_item_effects( obj )
  end
end


-- испорченные предметы, выброшенные на землю, можно сразу удалять.
function on_drop( obj, sobj )
  if not level.get_inventory_wnd():IsShown() then return end
  if sobj.parent_id ~= 65535 then return end
  local ttl = get_ttl_info( obj:section() )
  if ttl.ttl and obj:condition() < 0.01 then
    alife():release( sobj )
    return true
  end
end
