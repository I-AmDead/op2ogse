-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_key_down",       fun = this.on_key_down       })
  sm:subscribe({ signal = "on_mm_return_game", fun = this.on_mm_return_game })
  sm:subscribe({ signal = "on_spawn",          fun = this.on_spawn          })
end


function on_spawn()
  if not dsh_cfg.get_data().debug_mode then
    get_console():disable_command( "save" )
  end
  rebind_quick_load()
  rebind_quick_save()
end


local dik_quick_load
function rebind_quick_load()
  dik_quick_load = {}
  local data = dsh_cfg.get_data()
  if not data.quick_load then return end
  for _, kn in ipairs( parse_names( data.quick_load ) ) do
    local dik = keyname_to_dik( kn )
    ASSERT( dik, "keyname to dik not found: %s", kn )
    dik_quick_load[ dik ] = true
  end
  cmd( "unbind quick_load" )
  cmd( "unbind_sec quick_load" )
end


local dik_quick_save
function rebind_quick_save()
  dik_quick_save = {}
  local data = dsh_cfg.get_data()
  if not data.quick_save then return end
  for _, kn in ipairs( parse_names( data.quick_save ) ) do
    local dik = keyname_to_dik( kn )
    ASSERT( dik, "keyname to dik not found: %s", kn )
    dik_quick_save[ dik ] = true
  end
  cmd( "unbind quick_save" )
  cmd( "unbind_sec quick_save" )
end


function on_mm_return_game()
  rebind_quick_load()
  rebind_quick_save()
end


function on_key_down( key, bind )
  if level.main_input_receiver() then return end
  if dik_quick_save[ key ] then
    if dsh.allowed_to_save() then
      dsh.make_quicksave()
    end
    return true
  elseif dik_quick_load[ key ] then
    do_quick_load()
    return true
  end
end


function do_quick_load()
  -- dsh.load_game_internal( dsh.get_save_list()[ 1 ].name )
  local d = quick_load_dialog()
  level.start_stop_menu( d, true )
  d:show_message_box()
end


class "quick_load_dialog" ( dsh_ui.dshCUIScriptWnd )
function quick_load_dialog:__init() super()
  -- Положение и размеры окна
  self:Init( 0, 0, 1024, 768 )
  self.message_box = CUIMessageBoxEx()
  self:Register( self.message_box, "message_box" )
  self:dshAddCallback(
    "message_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes, self
  )
  self:dshAddCallback(
    "message_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.on_quit, self
  )
  self.message_box:Init( "message_box_confirm_load_save" )
end


function quick_load_dialog:show_message_box()
  self:GetHolder():start_stop_menu( self.message_box, true )
end


function quick_load_dialog:Update()
  CUIScriptWnd.Update( self )
  if not self.message_box:IsShown() then
    self:on_quit()
  end
end


function quick_load_dialog:OnMsgYes()
  self:on_quit()
  dsh.load_game_internal( dsh.get_save_list()[ 1 ].name )
end


function quick_load_dialog:on_quit()
  self:GetHolder():start_stop_menu( self, true )
  self:dsh_unregister_self()
end
