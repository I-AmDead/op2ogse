-- -*- mode: lua; coding: windows-1251-dos -*-

-- Через какое время наступит полное загрязнение (в часах)
local max_use_time = 10
-- На сколько раз хватает одной фляжки
local portions     = 1

local textures = {
  "hud_dirty_mask1",
  "hud_dirty_mask2",
  "hud_dirty_mask3",
  "hud_dirty_mask4",
  "hud_dirty_mask5",
}

-- Для этих текстур не менять прозрачность.
local exclude_alpha = {
  -- СКАТ-15
  [ "hud_skat15_blue"   ] = true,
  [ "hud_skat15_green"  ] = true,
  [ "hud_skat15_yellow" ] = true,
  [ "hud_skat15_red"    ] = true,
  [ "hud_skat15_red2"   ] = true,
  [ "hud_skat15_red3"   ] = true,
}


function attach( sm )
  sm:subscribe({ signal = "on_hud_hide", fun = this.on_hud_hide })
  sm:subscribe({ signal = "on_hud_show", fun = this.on_hud_show })
  sm:subscribe({ signal = "on_spawn",    fun = this.on_spawn    })
  sm:subscribe({ signal = "on_update",   fun = this.on_update   })
  sm:subscribe({ signal = "on_use",      fun = this.on_use      })
end


function on_spawn()
  local cs = get_hud():AddCustomStatic( textures[ 1 ], true )
  cs:wnd():Show( false )
end


function on_update()
  ogse_signals.get_mgr():reschedule( 10000 )
  if
    db.actor:alive()
    and db.actor:get_current_outfit()
    and ogse_dynamic_hud.get_current_helmet()
  then
    local dt = dsh_fdelta_times.fdelta_time( script_name(), true ) or 0
    if dt <= 0 then return end
    local cur_static = get_outfit_dirty_static()
    set_outfit_use_time( dt )
    local new_static, alpha = get_outfit_dirty_static()
    if new_static ~= cur_static then
      on_hud_hide()
      if new_static then
        show_dirty_static( new_static )
      end
    end
    set_hud_alpha( alpha, false, new_static )
  else
    dsh_fdelta_times.stop_timer( script_name() )
  end
end


local cur_outfit = {}
function get_outfit_dirty_static()
  local outfit = db.actor:get_current_outfit()
  if not outfit then return end
  if ( not cur_outfit.id ) or cur_outfit.id ~= outfit:id() then
    local sobj = alife():object( outfit:id() )
    local ini  = sobj:spawn_ini()
    local t    = {}
    t.id = outfit:id()
    if ini:section_exist( script_name() ) then
      t.use_time = get_u32( script_name(), "use_time", 0, ini )
    else
      t.use_time = 0
    end
    cur_outfit = t
  end
  if cur_outfit.use_time > 0 then
    local max  = max_use_time * 3600
    if cur_outfit.use_time > max then cur_outfit.use_time = max end
    local step = math.floor( max / ( table.getn( textures ) ) )
    local cur  = math.floor( cur_outfit.use_time / step )
    if cur > 0 then
      ASSERT( cur <= table.getn( textures ), "too big: cur = %s", cur )
      return textures[ cur ], 1
    end
    return textures[ 1 ], math.min( 1, cur_outfit.use_time / step )
  end
end


function set_outfit_use_time( dt )
  local max = max_use_time * 3600
  if dt > 0 then
    local rain_f = level.rain_factor()
    if rain_f > 0 then
      local step = math.floor( max / table.getn( textures ) )
      dt = 0 - math.floor( step * rain_f )
      if dt == 0 then return end
    end
  end
  if cur_outfit.use_time == 0   and dt < 0 then return end
  if cur_outfit.use_time >= max and dt > 0 then return end
  cur_outfit.use_time = cur_outfit.use_time + dt
  if cur_outfit.use_time < 0   then cur_outfit.use_time = 0   end
  if cur_outfit.use_time > max then cur_outfit.use_time = max end
  local outfit = db.actor:get_current_outfit()
  local sobj   = alife():object( outfit:id() )
  ASSERT( sobj, "can't find sobj: %s", outfit:name() )
  local ini = sobj:spawn_ini()
  ini.readonly = false
  if cur_outfit.use_time > 0 then
    ini:w_u32( script_name(), "use_time", cur_outfit.use_time )
  elseif
    ini:section_exist( script_name() )
    and ini:line_exist( script_name(), "use_time" )
  then
    ini:remove_line( script_name(), "use_time" )
  end
  sobj:save_spawn_ini()
end


function reset_outfit_use_time( step_k )
  local outfit     = db.actor:get_current_outfit()
  local cur_static = get_outfit_dirty_static()
  local max        = max_use_time * 3600
  local step       = math.floor( max / table.getn( textures ) ) * ( step_k or 1 )
  if cur_outfit.use_time > step then
    cur_outfit.use_time = cur_outfit.use_time - step
  else
    cur_outfit.use_time = 0
  end
  set_outfit_use_time( 0 )
  on_hud_hide()
  local static_name, alpha = get_outfit_dirty_static()
  if static_name then
    show_dirty_static( static_name )
  end
  set_hud_alpha( alpha, false, static_name )
end


local static_in_use

function on_hud_hide()
  if static_in_use then
    if get_hud():GetCustomStatic( static_in_use ) then
      dsh.HideCustomStatic( static_in_use )
      static_in_use = nil
    end
  end
end


function on_hud_show( show, hud_static )
  local static_name, alpha = get_outfit_dirty_static()
  if static_name then
    show_dirty_static( static_name )
  end
  set_hud_alpha( alpha, hud_static, static_name )
end


function show_dirty_static( static_name )
  local cs = dsh.ShowCustomStatic( static_name )
  if ogse_dynamic_hud.is_wpn_zoom_mode() then
    cs:wnd():SetWndRect( -512, -32, 1536, 800 )
  else
    cs:wnd():SetWndRect(    0,   0, 1024, 768 )
  end
  static_in_use = static_name
end


function get_max_portions()
  return portions
end


function on_use( obj )
  if obj:section() == "flaska" then
    return use_flaska( obj, false )
  end
end


function use_flaska( obj, clean_flaska )
  local cond, removed = obj:condition(), false
  local fx
  if
    clean_flaska
    and db.actor:get_current_outfit() and ogse_dynamic_hud.get_current_helmet()
  then
    fx = "clean_mask"
    local step = 1 / get_max_portions()
    cond = cond - step
    if cond >= step / 2 then
      dsh.set_condition( obj, cond )
    else
      ogse.remove_item_from_inventory( obj )
      removed = true
    end
  else
    fx = "flaska"
    ogse.remove_item_from_inventory( obj )
    removed = true
  end
  dsh_hud_fx.run_fx( obj:section(), fx, nil, { [ "medkit_cond" ] = cond } )
  if removed then return true end
end


function set_hud_alpha( alpha, hud_static, dirt_static )
  hud_static = hud_static or ogse_dynamic_hud.get_current_helmet()
  if not hud_static then return end

  local cs = get_hud():GetCustomStatic( hud_static )
  if not cs then return end

  local clr_alpha
  if
    ui_mm_opt_video_adv.only_3_and_more_mode()
    and not exclude_alpha[ hud_static ]
  then
    if alpha and alpha > 0.5 then
      if alpha < 1 then
        clr_alpha = math.floor( 255 * math.min( 1, alpha ) )
      else
        clr_alpha = 255
      end
    else
      clr_alpha = 128
    end
    cs:wnd():SetColorA( clr_alpha )
  end

  if not dirt_static then return end
  cs = get_hud():GetCustomStatic( dirt_static )
  if not cs then return end

  if alpha and alpha > 0.8 then
    if alpha < 1 then
      local alpha2 = ( alpha - 0.8 ) / 0.2
      clr_alpha = math.floor( 255 * math.min( 1, alpha2 ) )
    else
      clr_alpha = 255
    end
  else
    clr_alpha = 0
  end
  cs:wnd():SetColorA( clr_alpha )
end
