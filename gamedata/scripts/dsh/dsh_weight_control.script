-- -*- mode: lua; coding: windows-1251-dos -*-

-- на сколько хватает одного аккумулятора (часов)
local use_time         = 3 * 24
-- за сколько часов разрядится аккумулятор при максимальном перегрузе
local overweight_time  = 12
-- power_loss для случая отсутствия энергии
local empty_power_loss = 2

-- через сколько часов перегруза бонус к переносимому весу
-- увеличивается на 1 кг.
local weight_upgrade_time = 12
-- максимальный бонус
local weight_upgrade_max  = 40


function attach( sm )
  sm:subscribe({ signal = "on_drop",  fun = this.remove_outfit })
  sm:subscribe({ signal = "on_save",  fun = this.on_save       })
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn      })
end


local weight_upgrade
local weight_upgrade_cur

function set_weight_upgrade( v )
  weight_upgrade     = v
  weight_upgrade_cur = math.floor( weight_upgrade )
end


function on_spawn()
  local sm = ogse_signals.get_mgr()
  dsh.exec_on_update(
    function()
      sm:subscribe({ signal = "on_belt_change",  fun = this.on_belt_change })
      sm:subscribe({ signal = "on_item_to_ruck", fun = this.remove_outfit  })
      sm:subscribe({ signal = "on_item_to_slot", fun = this.use_outfit     })
    end
  )
  sm:subscribe({ signal = "on_update", fun = this.on_update })
  sm:subscribe({ signal = "on_update", fun = this.use_power })
  set_weight_upgrade(
    ogse.load_var_safe( "dsh_weight_control.weight_upgrade" ) or 0
  )
  log2( "[%s]: weight_upgrade = %s", script_name(), weight_upgrade )
end


function on_save()
  log2( "[%s]: weight_upgrade = %s", script_name(), weight_upgrade )
  ogse.save_var( "dsh_weight_control.weight_upgrade", weight_upgrade )
end


function use_outfit( obj )
  if obj:is_outfit() then
    recalc_outfit()
  end
end


function remove_outfit( obj )
  if obj:is_outfit() and not db.actor:get_current_outfit() then
    recalc_outfit()
  end
end


local tf = get_float( "alife", "time_factor" )
local weight_upgrade_inc = 1 / ( weight_upgrade_time * 3600 / tf )

function on_update()
  ogse_signals.get_mgr():reschedule( 1000 )
  if not db.actor:alive() then return end
  if
    weight_upgrade < weight_upgrade_max
    and ogse_actor_conditions_mgr.get_overweight_power() < 1
  then
    local aobj = get_actor_obj()
    if aobj:is_actor_moving() then
      set_weight_upgrade( weight_upgrade + weight_upgrade_inc )
    end
  end
  recalc_outfit()
end


function recalc_outfit()
  set_weight_parameters()
  set_radiation_protection()
end


local belt_changed = false
function on_belt_change()
  belt_changed = true
end


local def_max_weight      = get_float( "inventory", "max_weight", 0 )
local def_max_walk_weight = get_float(
  "actor_condition", "max_walk_weight", 0
)
local on_power_mode = false

function set_weight_parameters()
  on_power_mode = false
  local ext = {
    [ "actor_max_walk_weight"  ] = weight_upgrade_cur,
    [ "actor_max_weight"       ] = weight_upgrade_cur,
    [ "outfit_max_walk_weight" ] = 0,
    [ "outfit_max_weight"      ] = 0,
  }
  ogse_signals.get_mgr():call( "on_before_set_actor_max_weights", ext )
  local outfit = db.actor:get_current_outfit()
  if outfit then
    local cond   = outfit:condition()
    local dt     = dsh_fdelta_times.fdelta_time( script_name(), true ) or 0
    local params = get_outfit_params( outfit:section() )
    local outfit_max_walk_weight, outfit_max_weight = 0, 0
    if params.use_power then
      local power_loss = params.power_loss
      if have_power( dt ) then
        outfit_max_weight      = params.outfit_max_weight + ext.outfit_max_weight
        outfit_max_walk_weight = params.outfit_max_walk_weight
          + ext.outfit_max_walk_weight
        on_power_mode = true
      else
        power_loss = empty_power_loss
      end
      if cond < 0.8 then
        power_loss = power_loss + ( 10 - power_loss ) * ( 0.8 - cond )
      end
      set_outfit_power_loss( outfit, power_loss )
    else
      outfit_max_weight      = params.outfit_max_weight + ext.outfit_max_weight
      outfit_max_walk_weight = params.outfit_max_walk_weight
        + ext.outfit_max_walk_weight
    end
    local max_weight = def_max_weight
      + ext.actor_max_weight
      + outfit_max_weight * cond
    local inv_refresh = math.abs( max_weight - db.actor:get_max_weight() ) > 1
    db.actor:set_actor_max_weight( max_weight )
    db.actor:set_actor_max_walk_weight(
      def_max_walk_weight
        + ext.actor_max_walk_weight
        + outfit_max_walk_weight * cond
    )
    if
      belt_changed and inv_refresh and level.get_inventory_wnd():IsShown()
    then
      -- db.actor:invalidate_inventory()
      update_inventory_weight()
    end
    belt_changed = false
  else
    dsh_fdelta_times.stop_timer( script_name() )
    db.actor:set_actor_max_weight( def_max_weight + ext.actor_max_weight )
    db.actor:set_actor_max_walk_weight(
      def_max_walk_weight + ext.actor_max_walk_weight
    )
  end
end


function set_radiation_protection()
  local outfit = db.actor:get_current_outfit()
  if not outfit then return end
  local params = get_outfit_params( outfit:section() )
  local protections = {
    "radiation_protection",
    "telepatic_protection",
  }
  if
    outfit:condition() < 0.8
    or (
      params.helmet
      and not ogse_dynamic_hud.get_current_helmet()
    )
  then
    for _, k in ipairs( protections ) do
      set_outfit_protection( outfit, k, 0 )
    end
  else
    for _, k in ipairs( protections ) do
      set_outfit_protection( outfit, k, params[ k ] )
    end
  end
end


local params_cache = {}
function get_outfit_params( sect )
  if not params_cache[ sect ] then
    local t = {}
    t.outfit_max_walk_weight  = get_float(
      sect, "dsh_weight_control.max_walk_weight",  0
    )
    t.outfit_max_weight = get_float( sect, "dsh_weight_control.max_weight", 0 )
    t.use_power  = get_bool( sect, "dsh_weight_control.use_power", false )
    t.helmet     = get_bool( sect, "dynamic_hud_enable", false )
    t.power_loss = get_float( sect, "power_loss", 1.0 )
    t.radiation_protection = get_float( sect, "radiation_protection", 0 )
    t.telepatic_protection = get_float( sect, "telepatic_protection", 0 )
    params_cache[ sect ] = t
  end
  return params_cache[ sect ]
end


local on_power_dt, on_power_dt_k = 0, 0

function have_power( dt )
  local found = find_power()
  if table.getn( found ) >= 2 then
    if dt > 0 then
      local k = get_power_k()
      if k > 0 then
        on_power_dt   = on_power_dt   + dt
        on_power_dt_k = on_power_dt_k + dt * k
      end
    end
    return true
  end
  return false
end


function find_power()
  local found = {}
  local items = inventory.on_belt_obj( "ekza_akkumul" )
  if items and table.getn( items ) >= 2 then
    for _, obj in ipairs( items ) do
      if obj:condition() > 0 then
        table.insert( found, obj )
      end
    end
  end
  return found
end


function use_power()
  ogse_signals.get_mgr():reschedule( 10000 )
  if not db.actor:alive() then return end
  if on_power_mode then
    local found = find_power()
    local used  = on_power_dt_k / ( use_time * 3600 )
    for _, obj in ipairs( found ) do
      local cond = obj:condition()
      if cond > used then
        dsh.set_condition( obj, cond - used )
      else
        dsh.set_condition( obj, 0 )
      end
    end
    ogse_signals.get_mgr():call( "on_outfit_use_power", on_power_dt )
  end
  on_power_dt, on_power_dt_k = 0, 0
end


function get_power_mode()
  return on_power_mode
end


function get_power_k()
  local k = 0
  if
    get_actor_obj():is_actor_walking()
    or get_actor_obj():is_actor_running()
    or get_actor_obj():is_actor_crouching()
    or get_actor_obj():is_actor_creeping()
    or get_actor_obj():is_actor_climbing()
  then
    k = 1
  elseif get_actor_obj():is_actor_sprinting() then
    k = 2
  end
  local overweight = ogse_actor_conditions_mgr.get_overweight_power()
  if overweight < 1 then
    k = k * ( use_time / overweight_time * ( 1 - overweight ) )
  end
  return k
end
