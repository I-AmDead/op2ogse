-- -*- mode: lua; coding: windows-1251-dos -*-
-------------------------------------------------------------------------------
--| ogse_relations.script                                                   |--
--| Скриптовая обвязка для очистки отношений                                |--
--| K.D., OGS Evolution Team, 2015                                          |--
--| Ревизия: 14/03/2015                                                     |--
-------------------------------------------------------------------------------

function attach(sm)
  sm:subscribe({ signal = "on_npc_before_hit",  fun = this.on_npc_before_hit  })
  sm:subscribe({ signal = "on_npc_death",       fun = this.on_npc_death       })
  sm:subscribe({ signal = "on_spawn",           fun = this.on_spawn           })
end


local friends_comm = {
  [ "ecolog"  ] = true,
  [ "dolg"    ] = true,
  [ "freedom" ] = true,
  [ "green"   ] = true,
  [ "nebo"    ] = true,
  [ "stalker" ] = true,
  [ "trader"  ] = true,
}

function on_npc_before_hit( obj, hit_data )
  if
    ( not obj:alive() )
    or hit_data.who_id ~= db.actor:id()
    or obj:relation( db.actor ) == game_object.enemy
    or hit_data.power == 0
  then
    return
  end
  local binder = obj:binded_object()
  local t      = binder[ script_name() ]
  if not t then
    t = {}
    binder[ script_name() ] = t
  end
  if t.ff_detected then return end
  t.ff_detected = true
  local gulag = xr_gulag.get_npc_gulag( obj )
  if gulag then
    t.gulag = gulag.name
  end
  local wpn, ammo
  if hit_data.weapon_id then
    wpn = level.object_by_id( hit_data.weapon_id )
    if wpn then
      ammo = dsh.get_cur_wpn_ammo( wpn )
      wpn  = wpn:section()
    end
  end
  log2(
    "[%s]: friendly fire registered: %s, weapon = %s (%s)",
    script_name(), obj:name(), tostring( wpn ), tostring( ammo )
  )
end


local gulags_bad = {
  [ "val_escort"    ] = true,
  [ "val_sacrifice" ] = true
}

function on_npc_death( victim, who )
  if not who then return end
  if who:id() ~= db.actor:id() then return end
  local binder = victim:binded_object()
  local t      = binder[ script_name() ]
  if not ( t and t.ff_detected ) then return end
  if friends_comm[ victim:character_community() ] then
    local timer_name = "dsh_ogse_relations.ff_detected_sms1"
    if not ogse_st_mgr.timer_exists( timer_name ) then
      ogse_st_mgr.start_gtimer( timer_name, 19 * 60 , timer_name )
    end
  end
  if t.gulag and not gulags_bad[ t.gulag ] then
    xr_gulag.setGulagEnemy( t.gulag, db.actor )
  end
end


function ff_detected_sms1()
  db.actor:change_character_reputation( -50 )
  local timer_name = "dsh_ogse_relations.ff_detected_sms2"
  if not ogse_st_mgr.timer_exists( timer_name ) then
    ogse_st_mgr.start_gtimer( timer_name, 5 * 3600 + 11 * 60 , timer_name )
  end
  local name, sname = amk_names_lists.get_strings()
  amk.send_tip(
    "Видел, как один сталкер с харей покорёженной, парня завалил. От такого всё, что хочешь ждать можно.",
    string.format( "%s %s", name, sname ),  0, 5, "uniq", "news"
  )
  name, sname = amk_names_lists.get_strings()
  amk.send_tip(
    "Это кто такой? Знал я одного. Морда ужас! Копчёный или не... На мы букву... В общем понятно всё с таким.",
    string.format( "%s %s", name, sname ), 15, 5, "uniq", "news"
  )
end


function ff_detected_sms2()
  db.actor:change_character_reputation( -250 )
  local name, sname = amk_names_lists.get_strings()
  amk.send_tip(
    string.format(
      "Народ, слыхали? Один сталкер по кличке %s таким козлом оказался! Своих мужиков кидает... Скот.",
      dsh.get_actor_name()
    ),
    string.format( "%s %s", name, sname ),  0, 5, "uniq","news"
  )
  name, sname = amk_names_lists.get_strings()
  amk.send_tip(
    "Да убивать за такое нужно! На месте! Чтоб другим неповадно было!",
    string.format( "%s %s", name, sname ), 15, 5, "uniq", "news"
  )
end


function on_spawn()
  local s = get_string( "game_relations", "reputation" )
  ASSERT( s, "'reputation' not found in [game_relations]" )
  local reputations = parse_names( s )
  ASSERT(
    table.getn( reputations ) > 2,
    "wrong 'reputation' in [game_relations]: %s", s
  )
  local max = tonumber( reputations[ table.getn( reputations ) - 1 ] )
  ASSERT( max, "wrong 'reputation' in [game_relations]: %s", s )
  if db.actor:character_reputation() > max then
    log2(
      "[%s]: adjust actor's character_reputation(): %s -> %s",
      script_name(), db.actor:character_reputation(), max
    )
    db.actor:change_character_reputation(
      max - db.actor:character_reputation()
    )
  end
end
