-- -*- mode: lua; coding: windows-1251-dos -*-

function allow_break_dialog(first_speaker, second_speaker, id)
	if second_speaker:profile_name() == "osoznanie" then
		return false
	end

	return true
end


function break_dialog(first_speaker, second_speaker, id)
	first_speaker:stop_talk()
	second_speaker:stop_talk()
end

function disable_talk_self(first_speaker, second_speaker)
	first_speaker:disable_talk()
end
function disable_talk_victim(first_speaker, second_speaker)
	second_speaker:disable_talk()
end

function punch(first_speaker, second_speaker)
	--abort("KICK ASS!")
	--xr_punch.punch[first_speaker:id()] = second_speaker
	db.storage[second_speaker:id()].punch.enabled = true
end

function get_money_then_leave(first_speaker, second_speaker)
	db.storage[first_speaker:id()].meet.enabled = false
	db.storage[first_speaker:id()].robber.enabled = true
end

function is_wounded(first_speaker, second_speaker)
    if db.storage[first_speaker:id()].wounded ~= nil and
       db.storage[first_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end

	return xr_wounded.is_wounded(first_speaker)
end
function is_opp_wounded(first_speaker, second_speaker, dialog_id)
    if db.storage[second_speaker:id()].wounded ~= nil and
       db.storage[second_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end
	return	xr_wounded.is_wounded(second_speaker)
end
function is_not_wounded(first_speaker, second_speaker)
	return not this.is_wounded(first_speaker, second_speaker)
end
function is_not_opp_wounded(first_speaker, second_speaker)
	return not this.is_opp_wounded(first_speaker, second_speaker)
end


function actor_have_medkit()
  return db.actor:object( "medkit" )
    or db.actor:object( "medkit_army" )
    or db.actor:object( "medkit_scientic" )
end

function dont_actor_have_medkit()
  return not actor_have_medkit()
end

function actor_transfer_medkit( first_speaker, second_speaker )
  if first_speaker:object( "medkit" ) then
    dialogs.relocate_item_section( second_speaker, "medkit", "out" )
  elseif first_speaker:object( "medkit_army" ) then
    dialogs.relocate_item_section( second_speaker, "medkit_army", "out" )
  else
    dialogs.relocate_item_section( second_speaker, "medkit_scientic", "out" )
  end
end


function actor_have_bandage(first_speaker, second_speaker)
	return first_speaker:object("bandage") ~= nil
end


function transfer_medkit(first_speaker, second_speaker)
  actor_transfer_medkit( first_speaker, second_speaker )
  -- Тут надо анлочить аптечку для использования.
  xr_wounded.unlock_medkit( second_speaker )
	
  first_speaker:change_character_reputation( 10 )
  if xrs_battle_ai.check_is_enemy( second_speaker, first_speaker ) then
    xr_wounded.help_wounded( second_speaker )
    actor_stats.add_points( "exp", "exp_enemies_healed", 1, 1 )
  else
    if not second_speaker:is_relation_enemy( first_speaker ) then
      second_speaker:set_relation( game_object.friend, first_speaker )
    end
    actor_stats.add_points( "exp", "exp_friends_healed", 1, 1 )
  end

  kostya_dialog.doktor_lekar1_money()
  kostya_dialog.doktor_lekar1_have()
end


function transfer_bandage(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "bandage", "out")
	second_speaker:set_relation(game_object.friend, first_speaker)
	kostya_dialog.doktor_lekar1_money()
	kostya_dialog.doktor_lekar1_have()
end


function kill_yourself( npc, actor )
  if npc:is_actor() then npc = actor end
  npc:kill( npc )
end


local quest_section = {
	["gunslinger_flash"] = true,
	["af_blood_tutorial"] = true,
	["quest_case_02"] = true,
	["dar_document1"] = true,
	["dar_document2"] = true,
	["dar_document3"] = true,
	["dar_document4"] = true,
	["dar_document5"] = true,
	["kruglov_flash"] = true,
	["lab_x16_documents"] = true,
	["good_psy_helmet"] = true,
	["bad_psy_helmet"] = true,
	["decoder"] = true,
	["dynamite"] = true,
	["quest_case_01"] = true,
	["hunters_toz"] = true,
	["bar_ecolog_flash"] = true,
	["bar_tiran_pda"] = true,
	["bar_lucky_pda"] = true,
	["medkit"] = true,
	["medkit_army"] = true,
	["medkit_scientic"] = true,
	["bandage"] = true,
	["golem_pda"] = true,
	[ "sumka_arhara" ] = true,
}

--' Obsolete, do not use!!!
function relocate_item(victim, obj, type)
	if db.actor and victim then
		if type == "in" then
			victim:transfer_item(obj, db.actor)
		elseif type == "out" then
			db.actor:transfer_item(obj, victim)
		end
		--'news_manager.relocate_item(db.actor, type, obj)
	end
end


--' Use this function instead.
function relocate_item_section( victim, section, type )
  local created_items = {}
  if db.actor and victim then
    if type == "in" then
      --' Трансферить нужно только квестовые предметы.
      if
        quest_section[ section ]
        and victim:id() ~= db.actor:id()
        and victim:object( section )
      then
        victim:transfer_item( victim:object( section ), db.actor )
      else
        table.insert( created_items, ogse.spawn_item_in_inv( section ) )
      end
      news_manager.relocate_item( db.actor, type, section )
    elseif type == "out" then
      if quest_section[ section ] and db.actor:object( section ) then
        db.actor:transfer_item( db.actor:object( section ), victim )
        news_manager.relocate_item( db.actor, type, section )
      else
        local res = amk_utils.inventory_search_check({
          [ section ] = 1,
        })
        if res then
          amk_utils.out_items_number({
            [ section ] = 1,
          })
        end
      end
    end
  end
  return created_items
end


function relocate_money(victim, num, type)
	if db.actor and victim then
		if type == "in" then
			db.actor:give_money(num)
			game_stats.money_quest_update (num) 
		elseif type == "out" then
			db.actor:transfer_money(num, victim)
			game_stats.money_quest_update (-num) 
		end
		news_manager.relocate_money(db.actor, type, num)
	end
end

--'---------------------------------------------------------------------------------
--' DIALOG ALLOWED
--'---------------------------------------------------------------------------------
function dialog_allowed(object, victim, id)
	if id ~= nil then
--		printf("*DIALOGS*: dialog_allowed: %s", id)
	else
--		printf("*DIALOGS*: dialog_allowed: nil")
	end
	if db.storage[victim:id()].actor_dialogs ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_dialogs) do
			if v == id then return true end
		end
	end
	return false
end
function dialog_not_disable(object, victim, id)
	if id ~= nil then
--		printf("*DIALOGS*: dialog_disable:%s", id)
	else
--		printf("*DIALOGS*: dialog_disable:nil")
	end
	if db.storage[victim:id()].actor_disable ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_disable) do
			if v == id then return false end
		end
	end
	return true
end

function allow_wounded_dialog(object, victim, id)
	if db.storage[victim:id()].wounded == nil then
		return false
	end	
	if db.storage[victim:id()].wounded.help_dialog == id then
		return true
	end
	return false	
end


-----------------------------------------------------------------------------------
-- LEVELS
-----------------------------------------------------------------------------------
function level_escape(first_speaker, second_speaker)
	return level.name() == "l01_escape"
end

function level_garbage(first_speaker, second_speaker)
	return level.name() == "l02_garbage"
end

function level_agroprom(first_speaker, second_speaker)
	return level.name() == "l03_agroprom_ai2" or level.name() == "l03_agroprom"
end

-----------------------------------------------------------------------------------
-- Relation functions
-----------------------------------------------------------------------------------
function is_friend(first_speaker, second_speaker)
	return first_speaker:relation(second_speaker) == game_object.friend
end

function is_not_friend(first_speaker, second_speaker)
	return not is_friend(first_speaker, second_speaker)
end

function become_friend( first_speaker, second_speaker )
  if first_speaker:id() == db.actor:id() then
    first_speaker = second_speaker
  end
  first_speaker:set_relation( game_object.friend, db.actor )
end

-----------------------------------------------------------------------------------
-- Community
-----------------------------------------------------------------------------------
function actor_in_dolg(actor, npc)
	if db.actor then
		return db.actor:character_community() == "actor_dolg"
	end
	return false
end
function actor_not_in_dolg(actor, npc)
	return not actor_in_dolg(actor, npc)
end
function actor_set_dolg(actor, npc)
	printf("ACTOR NOW IN [DOLG] COMMUNITY")
	if db.actor then
		db.actor:set_character_community("actor_dolg", 0, 0)
	end
	return true
end
function actor_clear_community(actor, npc)
	printf("ACTOR NOW IN [NEUTRAL] COMMUNITY")
	if db.actor then
		db.actor:set_character_community("actor", 0, 0)
	end
	return true
end

-----------------------------------------------------------------------------------
-- Money functions
-----------------------------------------------------------------------------------
function has_2000_money(first_speaker, second_speaker)
	return first_speaker:money() >= 2000
end

-----------------------------------------------------------------------------------
-- TRADE
-----------------------------------------------------------------------------------
--' Инициализация торговли
function trade_init(seller, buyer)
	db.storage[seller:id()].meet.begin_wait_to_see.begin = time_global()/1000
	xr_position.setPosition(db.storage[seller:id()].meet.Seller, 
							db.storage[seller:id()].meet.Seller:level_vertex_id())
	db.storage[seller:id()].meet.Buyer = buyer
end

function want_trade(seller, buyer)
	if seller:relation(buyer) == game_object.friend or
		seller:relation(buyer) == game_object.neutral
	then
		return true
	else
		return false
	end
end

function dont_want_trade(seller, buyer)	
	return not want_trade(seller,buyer)
end

-- Счетчик количества вызовов диалога. Возвращает count раз true, затем false. 
-- должны быть прописаны поршни: "portion1, portion2...portion|Count|)" 
function dialog_count(portion, count)
	local pname = ""
	for i=1,count do
		pname = portion..tostring(i)
		if not has_alife_info(pname) then 
			db.actor:give_info_portion(pname)
			return true
		end
	end
	return false
end
-- проверка лимита. возвращает true если все поршни выданы.
function dialog_is_enough(portion, count)
	local pname = ""
	for i=1,count do
		pname = portion..tostring(i)
		if not has_alife_info(pname) then
			return false
		end
	end
	return true
end
