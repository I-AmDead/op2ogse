-- -*- mode: lua; coding: windows-1251-dos -*-
-- Physic door control
-- Исходный скрипт: Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
-- Перевод на xr_logic: Andrey Fidrya (Zmey) af@svitonline.com
-- Доработка: Oleg Kreptul (Haron) haronk@ukr.net

-- Вертексы вокруг этих дверей будут блокироваться, когда они закрыты.
local disable_vertexes_by_name = {
  -- Лабиринт
  [ "av_peshera_physic_object"      ] = 1,
  [ "av_peshera_physic_object_0001" ] = 1,
  [ "av_peshera_physic_object_0003" ] = 1,
  [ "av_peshera_physic_object_0005" ] = 1,

  -- Генераторы
  [ "generators_physic_object" ] = 1,

  -- X-18
  [ "dar_door1" ] = 1,
  [ "dar_door2" ] = 1,

  -- БУМ
  [ "mon_door_from_monolith_control"      ] = 1,
  [ "mon_door_from_monolith_control_0000" ] = 1,

  -- Саркофаг
  [ "sar_door" ] = 1,

  -- X-8
  [ "labx8_physic_door"      ] = 1,
  [ "labx8_physic_door_0000" ] = 1,
  [ "labx8_physic_door_0001" ] = 1,
  [ "labx8_physic_door_0002" ] = 1,
  [ "labx8_physic_door_scentific" ] = 1,
  [ "lx8_physic_door"        ] = 1,

  -- Лиманск
  [ "limansk_door_portal" ] = 1,

  -- Варлаб
  [ "war_door_lab" ] = 1,

  -- Юпитер
  [ "jup_b41_ph_door_outer" ] = 1,
  
  -- Затон
  [ "zat_a23_enter_door" ] = 1,
}


class "action_door"
function action_door:__init( obj, storage )
  self.feel_touch_inside = {}
  self.object  = obj
  self.st      = storage
  self.snd_obj = nil
end


function action_door:reset_scheme( loading )
  self.initialized = false

  local ph_shell = self.object:get_physics_shell()
  if not ph_shell then return end
  self.joint = ph_shell:get_joint_by_bone_name( "door" )

  self.low_limits, self.hi_limits = self.joint:get_limits(
    self.low_limits, self.hi_limits, 0
  )

  self.block           = false
  self.soundless_block = false
  self.show_tips       = self.st.show_tips

  local disable_snd
  -- Звук нужно отключить, только если скрипт двери для этого объекта
  -- используется впервые (т.е. после загрузки уровня или после
  -- загрузки сохраненной игры), иначе игрок услышит хлопок...
  if not self.st.script_used_more_than_once then
    disable_snd = true
    self.st.script_used_more_than_once = true
  end

  self:init_vertexes()
  if self.st.closed then
    -- Если дверь уже закрыта - то нужно закрыть без звука
    if self:is_closed() then
      disable_snd = true
    end
    self:close_door( disable_snd )
  else
    self:open_door( disable_snd )
  end

  self.object:set_nonscript_usable( false )
  self.initialized = true
end


function action_door:door_play_snd_from_set( sndset )
  if self.snd_obj then
    self.snd_obj:stop ()
    self.snd_obj = nil
  end

  self.snd_obj = xr_sound.get_sound_object( sndset, "random" )
  ASSERT(
    self.snd_obj,
    "object '%s': unable to create a sound object for soundset '%s'",
    self.object:name(), sndset
  )
  self.snd_obj:play_at_pos( self.object, self.object:position() )
end


function action_door:update( delta )
  ASSERT(
    self.initialized,
    "object '%s': door failed to initialize", self.object:name()
  )

  self:update_vertexes()
  xr_logic.try_switch_to_another_section( self.object, self.st, db.actor )
end


function action_door:fastcall()
  if not self.initialized then return false end

  if self.block and self:is_closed() then
    self:close_action()
    return true
  end
  return false
end


function action_door:close_action()
  -- Закрыли до предела, будем блокировать
  if self.st.no_force then
    self.joint:set_max_force_and_velocity(      0, 0, 0 )
  else
    self.joint:set_max_force_and_velocity( 100000, 1, 0 )
  end
  self.block = false
  -- Отыграть звук когда дверь захлопнулась:
  if not self.soundless_block and self.st.snd_close_stop then
    self:door_play_snd_from_set( self.st.snd_close_stop )
  end
end


function action_door:open_door( disable_snd )
  if not disable_snd then
    if self.st.snd_open_start then
      self:door_play_snd_from_set( self.st.snd_open_start )
    end
  end

  if self.st.no_force then
    self.joint:set_max_force_and_velocity( 0,  0, 0 )
  else
    self.joint:set_max_force_and_velocity(
      ( self.st.apply_force or 2100 ), -3, 0
    )
  end
  self.block = false

  if self.show_tips and self.st.tip_close then
    self.object:set_tip_text( self.st.tip_close )
  end
end


function action_door:is_closed()
  local angle = self.joint:get_axis_angle( 90 )
  if angle <= self.low_limits then
    return true
  end
  return false
end


function action_door:close_door( disable_snd )
  if not disable_snd then
    if self.st.snd_close_start then
      self:door_play_snd_from_set( self.st.snd_close_start )
    end
  end

  -- Ставим коллбек для отлова окончания закрытия двери (чтобы
  -- заблокировать ее и проиграть звук, если нужно):
  self.object:set_fastcall( self.fastcall, self )
  -- self.object:set_fastcall( self.fastcall, self )
  -- self.object:set_fastcall( self.fastcall, self )

  if self.st.no_force then
    self.joint:set_max_force_and_velocity(  0,  0, 0 )
  else
    self.joint:set_max_force_and_velocity(
      ( self.st.apply_force or 200 ), 3, 0
    )
  end
  self.block           = true   -- Закрываем и блокируем
  self.soundless_block = disable_snd

  if self.show_tips then
    if self.st.locked and self.st.tip_unlock then
      self.object:set_tip_text( self.st.tip_unlock )
      return
    end

    if self.st.tip_open then
      self.object:set_tip_text( self.st.tip_open )
    end
  end
end


function action_door:try_switch()
  if self.st.on_use then
    if
      xr_logic.switch_to_section(
        self.object, self.st,
        xr_logic.pick_section_from_condlist(
          db.actor, self.object, self.st.on_use.condlist
        )
      )
    then
      return true
    end
  end
  return false
end


function action_door:use_callback( door, actor )
  if self.st.locked then
    if self.st.snd_open_start then
      self:door_play_snd_from_set( self.st.snd_open_start )
    end
  end
  self:try_switch()
end


function action_door:hit_callback( obj, amount, local_direction, who, bone_index )
  if self.st.hit_on_bone[ bone_index ] then
    local section = xr_logic.pick_section_from_condlist(
      db.actor, self.object, self.st.hit_on_bone[ bone_index ].state
    )
    xr_logic.switch_to_section( obj, self.st, section )
  end
end


function action_door:deactivate()
  self.object:set_tip_text( "" )
  if self.has_feel_touch then
    self.object:remove_feel_touch(
      self, self.feel_touch_new_delete, self.feel_touch_contact
    )
    self.has_feel_touch = false
    -- log2( "[%s]: %s: remove_feel_touch", script_name(), self.object:name() )
  end
end


function action_door:init_vertexes()
  local t = self.st.disable_vertexes
  if not t then
    t = {}
    self.st.disable_vertexes = t
  end
  local radius = self.st.disable_vertexes_radius
  if radius and radius > 0 then
    if not t.vertexes then
      t.vertexes = dsh.find_all_vertexes_in_radius(
        self.object:position(), radius
      )
    end
    if table.getn( t.vertexes ) > 0 and not t.disabled then
      self.disable_vertexes = true
      self.vertexes         = {}
      for _, lvid in ipairs( t.vertexes ) do
        self.vertexes[ lvid ] = true
      end
      if not self.has_feel_touch then
        self.object:add_feel_touch(
          radius + 1, self,
          self.feel_touch_new_delete, self.feel_touch_contact
        )
        self.has_feel_touch = true
        -- log2(
        --   "[%s]: %s: add_feel_touch: radius[%s]",
        --   script_name(), self.object:name(), radius + 1
        -- )
      end
      t.disabled = true
    end
  elseif t.disabled then
    for _, lvid in ipairs( t.vertexes ) do
      level.enable_vertex( lvid )
    end
    -- log2(
    --   "[%s]: %s: enable vertexes: %s",
    --   script_name(), self.object:name(), table.concat( t.vertexes, ", " )
    -- )
    t.disabled = false
  end
end


function action_door:feel_touch_contact( obj )
  return obj:is_custom_monster()
end


function action_door:feel_touch_new_delete( obj, is_new )
  if not obj:alive() then return end
  if is_new then
    self.feel_touch_inside[ obj:id() ] = true
    if ( not self.disable_vertexes ) and self:is_anybody_inside() then
      -- log2(
      --   "[%s]: %s: feel_touch_new: %s",
      --   script_name(), self.object:name(), obj:name()
      -- )
      local vertexes = {}
      for lvid, _ in pairs ( self.vertexes ) do
        level.enable_vertex( lvid )
        table.insert( vertexes, lvid )
      end
      -- log2(
      --   "[%s]: %s: enable vertexes: %s",
      --   script_name(), self.object:name(), table.concat( vertexes, ", " )
      -- )
      self.disable_vertexes = true
    end
  else
    self.feel_touch_inside[ obj:id() ] = nil
    -- log2(
    --   "[%s]: %s: feel_touch_delete: %s",
    --   script_name(), self.object:name(), obj:name()
    -- )
    self:update_vertexes()
  end
end


function action_door:is_anybody_inside()
  for id, _ in pairs( self.feel_touch_inside ) do
    local obj
    if alife():object( id ) then
      obj = level.object_by_id( id )
    end
    if obj then
      if obj:alive() then
        if self.vertexes[ obj:level_vertex_id() ] then
          return obj
        end
      else
        self.feel_touch_inside[ id ] = nil
      end
    end
  end
  return false
end


function action_door:update_vertexes()
  if not self.disable_vertexes then return end
  local obj_inside = self:is_anybody_inside()
  if obj_inside then
    log2(
      "[%s]: %s: can't disable vertexes because %s is inside",
      script_name(), self.object:name(), obj_inside:name()
    )
    return
  end
  local vertexes = {}
  for lvid, _ in pairs ( self.vertexes ) do
    level.disable_vertex( lvid )
    table.insert( vertexes, lvid )
  end
  -- log2(
  --   "[%s]: %s: disable vertexes: %s",
  --   script_name(), self.object:name(), table.concat( vertexes, ", " )
  -- )
  self.disable_vertexes = false
end


function add_to_binder( npc, ini, scheme, section, storage )
  local new_action = action_door( npc, storage )

  -- Зарегистрировать все actions, в которых должен быть вызван метод
  -- reset_scheme при изменении настроек схемы:
  xr_logic.subscribe_action_for_events( npc, storage, new_action )
end


function set_scheme( npc, ini, scheme, section, gulag_name )
  local st = xr_logic.assign_storage_and_bind( npc, ini, scheme, section )
  st.logic = xr_logic.cfg_get_switch_conditions( ini, section, npc )

  st.closed          = utils.cfg_get_bool(
    ini, section, "closed", npc, false, true
  )
  st.locked          = utils.cfg_get_bool(
    ini, section, "locked", npc, false
  )
  st.no_force        = utils.cfg_get_bool(
    ini, section, "no_force", npc, false, false
  )
  st.show_tips       = utils.cfg_get_bool(
    ini, section, "show_tips", npc, false, true
  )
  st.tip_open        = utils.cfg_get_string(
    ini, section, "tip_open", npc, false, "", "tip_door_open"
  )
  st.tip_unlock      = utils.cfg_get_string(
    ini, section, "tip_open", npc, false, "", "tip_door_locked"
  )
  st.tip_close       = utils.cfg_get_string(
    ini, section, "tip_close", npc, false, "", "tip_door_close"
  )
  st.snd_open_start  = utils.cfg_get_string(
    ini, section, "snd_open_start", npc, false, "", "trader_door_open_start"
  )
  st.snd_close_start = utils.cfg_get_string(
    ini, section, "snd_close_start", npc, false, "", "trader_door_close_start"
  )
  st.snd_close_stop  = utils.cfg_get_string(
    ini, section, "snd_close_stop", npc, false, "", "trader_door_close_stop"
  )
  st.on_use          = xr_logic.cfg_get_condlist( ini, section, "on_use", npc )
  st.hit_on_bone     = utils.parse_data_1v(
    npc, utils.cfg_get_string( ini, section, "hit_on_bone", npc, false, "" )
  )
  st.apply_force = get_u32( section, "apply_force", nil, ini )

  local def_radius = false
  if st.closed then
    def_radius = disable_vertexes_by_name[ npc:name() ] or false
  end
  st.disable_vertexes_radius = get_float(
    section, "disable_vertexes_radius", def_radius, ini
  )
end
