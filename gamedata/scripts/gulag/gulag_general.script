-- -*- mode: lua; coding: windows-1251-dos -*-

local ltx

-- УНИВЕРСАЛЬНЫЙ ЛАГЕРЬ СТАЛКЕРОВ
function load_jobs_general_lager( sj, gname, tp, squad, groups, st )
  ltx = "[meet@generic_lager_guard]\n"
    .. "meet_state     = 10|wait@wait\n"
    .. "meet_state_wpn = 10|backoff@threat_weap\n"
    .. "victim         = 10|actor\n"
    .. "victim_wpn     = 10|actor\n"
    .. "use            = true\n"
    .. "use_wpn        = false\n"
    .. "syndata        = backoff@threat_weap\n"
    .. "precond        = visibility\n"

    .. "[meet@generic_lager_patrol]\n"
    .. "meet_state     = 5|wait@wait\n"
    .. "meet_state_wpn = 10|backoff@threat_weap\n"
    .. "victim         = 5|actor\n"
    .. "victim_wpn     = 10|actor\n"
    .. "use            = true\n"
    .. "use_wpn        = false\n"
    .. "syndata        = backoff@threat_weap\n"
    .. "precond        = visibility\n"

  -- Проверяем наличие кампов.
  local t
  local it = 1
  for _, desc in ipairs( dsh_get_kamp_paths( gname ) ) do
    local way_name  = desc.patrol
    -- Необходимо вычитать количество работ из названия точки пути.
    local ptr       = patrol( way_name )
    local wp_prop   = utils.parse_waypoint_data(
      way_name, ptr:flags(0), ptr:name(0)
    )
    local job_count = ( desc.count and tonumber( desc.count ) )
      or ( wp_prop.count and tonumber( wp_prop.count ) )
      or 5

    for i = 1, job_count do
      -- добавляем должность
      t = {
        section  = "logic@" .. way_name,
        idle     = 0,
        prior    = 8 - i,
        state    = { 0, 1 },
        squad    = squad,
        group    = groups[ 1 ],
        position_threshold = 50,
        in_rest  = "",
        out_rest = "",
      }
      table.insert( sj, t )
    end

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = kamp@" .. way_name .. "\n"
      .. "[kamp@" .. way_name .. "]\n"
      .. "center_point = " .. desc.center .. "\n"
      .. "soundgroup = ".. way_name .. "\n"
    if desc.task then
      job_ltx = job_ltx
        .. "path_walk = " .. desc.task .. "\n"
    end
    ltx = ltx .. job_ltx
    it  = it + 1
  end

  -- Проверяем наличие путей для сна.
  it = 1
  while level.patrol_path_exists( gname .. "_sleep_" .. it ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name = gname .. "_sleep_" .. it

    -- добавляем должность
    t = {
      section  = "logic@" .. way_name,
      idle     = 0,
      prior    = 4,
      state    = { 0, 1 },
      squad    = squad,
      group    = groups[ 1 ],
      position_threshold = 50,
      in_rest  = "",
      out_rest = "",
    }
    table.insert( sj, t )

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = sleeper@" .. way_name .. "\n"
      .. "[sleeper@" .. way_name .. "]\n"
      .. "path_main = sleep_" .. it .. "\n"
    ltx = ltx .. job_ltx
    it  = it + 1
  end

  -- Проверяем наличие путей брожения внутри лагеря.
  it = 1
  while level.patrol_path_exists( gname .. "_walker_" .. it .. "_walk" ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name = gname .. "_walker_" .. it .. "_walk"

    -- добавляем должность
    t = {
      section  = "logic@" .. way_name,
      idle     = math.random( 40, 60 ) * 60 * 1000,
      timeout  = math.random( 10, 20 ) * 60 * 1000,
      prior    = 5,
      state    = { 0, 1 },
      squad    = squad,
      group    = groups[ 1 ],
      position_threshold = 50,
      in_rest  = "",
      out_rest = "",
    }
    table.insert( sj, t )

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = walker@" .. way_name .. "\n"

      .. "[walker@" .. way_name .. "]\n"
      .. "sound_idle = state\n"
      .. "path_walk = walker_" .. it .. "_walk\n"

    if level.patrol_path_exists( gname .. "_walker_" .. it .. "_look" ) then
      job_ltx = job_ltx
        .. "path_look = walker_" .. it .. "_look\n"
    end
    ltx = ltx .. job_ltx
    it  = it + 1
  end

  -- Проверяем наличие путей брожения внутри лагеря(без таймаута).
  it = 1
  while level.patrol_path_exists( gname .. "_walker2_" .. it .. "_walk" ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name = gname .. "_walker2_" .. it .. "_walk"

    -- добавляем должность
    t = {
      section  = "logic@" .. way_name,
      idle     = 0,
      prior    = 5,
      state    = { 0, 1 },
      squad    = squad,
      group    = groups[ 1 ],
      position_threshold = 50,
      in_rest  = "",
      out_rest = "",
    }
    table.insert( sj, t )

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = walker@" .. way_name .. "\n"

      .. "[walker@" .. way_name .. "]\n"
      .. "sound_idle = state\n"
      .. "path_walk = walker2_" .. it .. "_walk\n"

    if level.patrol_path_exists( gname .. "_walker2_" .. it .. "_look" ) then
      job_ltx = job_ltx
        .. "path_look = walker2_" .. it .. "_look\n"
    end
    ltx = ltx .. job_ltx
    it  = it + 1
  end

  -- Проверяем наличие патрулей обхода в лагере.
  it = 1
  while level.patrol_path_exists( gname .. "_patrol_" .. it .. "_walk" ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name  = gname .. "_patrol_" .. it .. "_walk"
    local ptr       = patrol( way_name )
    local wp_prop   = utils.parse_waypoint_data(
      way_name, ptr:flags( 0 ), ptr:name( 0 )
    )
    local job_count = ( wp_prop.count and tonumber( wp_prop.count ) ) or 3

    for i = 1, job_count do
      -- добавляем должность
      t = {
        section  = "logic@" .. way_name,
        idle     = math.random( 60, 120 ) * 60 * 1000,
        prior    = 6,
        state    = { 0, 1 },
        squad    = squad,
        group    = groups[ 1 ],
        position_threshold = 50,
        in_rest  = "",
        out_rest = "",
      }
      table.insert( sj, t )
    end

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = patrol@" .. way_name .. "\n"

      .. "[patrol@" .. way_name .. "]\n"
      .. "meet = meet@generic_lager_patrol\n"
      .. "formation = back\n"
      .. "path_walk = patrol_" .. it .. "_walk\n"
      .. "on_signal = end| %=search_gulag_job%\n"

    if level.patrol_path_exists( gname .. "_patrol_" .. it .. "_look" ) then
      job_ltx = job_ltx
        .. "path_look = patrol_" .. it .. "_look\n"
    end
    ltx = ltx .. job_ltx
    it  = it + 1
  end

  -- Проверяем наличие часовых в лагере.
  it = 1
  for _, desc in ipairs( dsh_get_guard_paths( gname ) ) do
    local way_name = desc.patrol

    -- добавляем должность
    t = {
      section  = "logic@" .. way_name,
      idle     = 0,
      prior    = 7,
      state    = { 0, 1 },
      squad    = squad,
      group    = groups[ 1 ],
      position_threshold = 50,
      in_rest  = "",
      out_rest = "",
    }
    table.insert( sj, t )

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = walker@" .. way_name .. "\n"

      .. "[camper@" .. way_name .. "]\n"
      .. "meet = meet@generic_lager_guard\n"
      .. "path_walk = " .. desc.walk .. "\n"
      .. "on_info = walker@" .. way_name .. "\n"
    if desc.look then
      job_ltx = job_ltx
        .. "path_look = " .. desc.look .. "\n"
    end

    job_ltx = job_ltx
      .. "[walker@" .. way_name .. "]\n"
      .. "meet = meet@generic_lager_guard\n"
      .. "path_walk = " .. desc.walk .. "\n"
    if desc.look then
      job_ltx = job_ltx
        .. "path_look = " .. desc.look .. "\n"
    end

    ltx = ltx .. job_ltx
    it  = it + 1
  end

  -- Проверяем наличие снайперов в лагере.
  it = 1
  while level.patrol_path_exists( gname .. "_sniper_" .. it .. "_walk" ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name = gname .. "_sniper_" .. it .. "_walk"

    -- добавляем должность
    t = {
      section   = "logic@" .. way_name,
      idle      = 0,
      prior     = 10,
      state     = { 0, 1 },
      squad     = squad,
      group     = groups[ 1 ],
      position_threshold = 50,
      in_rest   = "",
      out_rest  = "",
      predicate = function( npc_info )
        return npc_info.is_sniper == true
      end
    }
    table.insert( sj, t )

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = walker@" .. way_name .. "\n"

      .. "[camper@" .. way_name .. "]\n"
      .. "path_walk = sniper_" .. it .. "_walk\n"
      .. "path_look = sniper_" .. it .. "_look\n"
      .. "sniper = true\n"
      .. "on_info = walker@" .. way_name .. "\n"

      .. "[walker@" .. way_name .. "]\n"
      .. "path_walk = sniper_" .. it .. "_walk\n"
      .. "path_look = sniper_" .. it .. "_look\n"
      .. "def_state_standing = hide\n"
    ltx = ltx .. job_ltx
    it  = it + 1
  end

  -- Проверяем возможность вырулить в рейд (наличие путей, алгоритм
  -- переключения)
  it = 1
  while level.patrol_path_exists( gname .. "_raid_" .. it .. "_walk" ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name  = gname .. "_raid_" .. it .. "_walk"
    local ptr       = patrol( way_name )
    local wp_prop   = utils.parse_waypoint_data(
      way_name, ptr:flags( 0 ), ptr:name( 0 )
    )
    local job_count = ( wp_prop.count and tonumber( wp_prop.count ) ) or 5

    for i = 1, job_count do
      -- добавляем должность
      t = {
        section   = "logic@" .. way_name,
        idle      = 0,
        prior     = 10,
        state     = { 1 },
        squad     = squad,
        group     = groups[ 1 ],
        fill_idle = xr_gulag.idle_once,
        position_threshold = 50,
        in_rest   = "",
        out_rest  = "",
      }
      table.insert( sj, t )
    end

    -- добавляем описание должности в лтх.
    local job_ltx = "[logic@" .. way_name .. "]\n"
      .. "active = patrol@" .. way_name .. "\n"

      .. "[patrol@" .. way_name .. "]\n"
      .. "meet = meet@generic_lager_patrol\n"
      .. "formation = around\n"
      .. "path_walk = raid_" .. it .. "_walk\n"

    if level.patrol_path_exists( gname .. "_raid_" .. it .. "_look") then
      job_ltx = job_ltx
        .."path_look = raid_" .. it .. "_look\n"
    end
    ltx = ltx .. job_ltx
    it  = it + 1
  end
end


-- УНИВЕРСАЛЬНОЕ ЛОГОВО МОНСТРОВ
function load_jobs_general_lair( sj, gname, tp, squad, groups, st )
  local job_ltx = {}
  -- Проверяем наличие моб_хом.
  local t
  local it = 1
  for _, desc in ipairs( dsh_get_mob_home_paths( gname ) ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name  = desc.patrol
    local ptr       = patrol( way_name )
    local wp_prop   = utils.parse_waypoint_data(
      way_name, ptr:flags( 0 ), ptr:name( 0 )
    )
    local job_count = ( desc.count and tonumber( desc.count ) )
      or ( wp_prop.count and tonumber( wp_prop.count ) )
      or 10

    for i = 1, job_count do
      -- добавляем должность
      t = {
        section  = "logic@" .. way_name,
        idle     = 0,
        prior    = 5,
        state    = { 0, 1 },
        squad    = squad,
        group    = groups[ 1 ],
        position_threshold = 20,
        in_rest  = "",
        out_rest = "",
      }
      table.insert( sj, t )
    end

    -- добавляем описание должности в лтх.
    table.insert( job_ltx, string.format( "[logic@%s]", way_name ) )
    table.insert( job_ltx, string.format( "active = mob_home@%s", way_name ) )

    table.insert( job_ltx, string.format( "[mob_combat@%s]", way_name ) )
    table.insert(
      job_ltx,
      string.format(
        "on_timer = %s | mob_home@%s", math.random( 30000, 60000 ), way_name
      )
    )

    table.insert( job_ltx, string.format( "[mob_home@%s]", way_name ) )
    table.insert(
      job_ltx,
      string.format( "on_signal = sig_attacked | mob_combat@%s", way_name )
    )
    table.insert( job_ltx, string.format( "path_home = %s", desc.path_home ) )

    if desc.maxr then
      table.insert(
        job_ltx, string.format( "home_max_radius = %s", desc.maxr  )
      )
    end

    if desc.minr then
      table.insert(
        job_ltx, string.format( "home_min_radius = %s", desc.minr )
      )
    end

    it = it + 1
  end

  -- Необходима атака в лице mob_home с agressive Проверяем
  -- возможность вырулить в рейд (наличие путей, алгоритм
  -- переключения)
  it = 1
  while level.patrol_path_exists( gname .. "_raid_" .. it ) do
    -- Необходимо вычитать количество работ из названия точки пути.
    local way_name  = gname .. "_raid_" .. it
    local ptr       = patrol( way_name )
    local wp_prop   = utils.parse_waypoint_data(
      way_name, ptr:flags( 0 ), ptr:name( 0 )
    )
    local job_count = ( wp_prop.count and tonumber( wp_prop.count ) ) or 5

    for i = 1, job_count do
      -- добавляем должность
      t = {
        section   = "logic@" .. way_name,
        idle      = 0,
        prior     = 10,
        state     = { 1 },
        squad     = squad,
        group     = groups[ 1 ],
        fill_idle = xr_gulag.idle_once,
        position_threshold = 70,
        in_rest   = "",
        out_rest  = "",
      }
      table.insert( sj, t )
    end

    -- добавляем описание должности в лтх.
    table.insert( job_ltx, string.format( "[logic@%s]", way_name ) )
    table.insert( job_ltx, string.format( "active = mob_home@%s", way_name ) )

    table.insert( job_ltx, string.format( "[mob_home@%s]", way_name ) )
    table.insert( job_ltx, string.format( "path_home = raid_%s", it ) )
    table.insert( job_ltx, "aggressive_home" )

    it = it + 1
  end

  ltx = table.concat( job_ltx, "\n" )
end


function load_job( sj, gname, tp, squad, groups, st )
  if tp == "general_lager" then
    return load_jobs_general_lager( sj, gname, tp, squad, groups, st )
  elseif tp == "general_lair" then
    return load_jobs_general_lair( sj, gname, tp, squad, groups, st )
  end
end


function load_states( gname, t )
  if t == "general_lager" then
    return function( gulag )
      if gulag.state == 0 then
        if gulag.population_comed == 0 then return 0 end
        if gulag:is_state_switch_1()   then return 1 end
        return 0
      elseif gulag.state == 1 then
        -- Если гулаг не на этой территории, то остальное проверять бессмысленно, так как
        -- 1) упомянутые в switch_0 гулаги элементарно не найдутся по имени
        -- 2) пришедшее население может оказаться равным нулю из-за
        -- другой схемы его подсчёта.
        if not db.zone_by_name[ gulag.name ] then return 1 end
        if gulag.population_comed == 0       then return 0 end
        if gulag:is_state_switch_0()         then return 0 end
        return 1
      end
    end
  elseif t == "general_lair" then
    return function( gulag )
      if gulag.state == 0 then
        if gulag.population_comed == 0 then return 0 end
        if gulag:is_state_switch_1()   then return 1 end
        return 0
      elseif gulag.state == 1 then
        if gulag.population_comed == 0 then return 0 end
        if gulag:is_state_switch_0()   then return 0 end
        return 1
      end
    end
  end
end


function checkStalker( npc_community, t, npc_rank, se_obj, preset_name )
  return t == "general_lager"
end

function checkMonster( npc_community, t, npc_rank, se_obj, preset_name )
  return t == "general_lair"
end


function load_ltx( gname, t )
  if t == "general_lager" or t == "general_lair" then
    return ltx
  end
  return nil
end


function dsh_get_kamp_paths( gname )
  local abbrevs, more = dsh_read_paths(
    gname, "kamp", { "center", "count", "task" }
  )
  if not abbrevs then
    abbrevs = {}
    local i = 1
    while level.patrol_path_exists( gname .. "_kamp_" .. i ) do
      table.insert( abbrevs, "kamp_" .. i )
      i = i + 1
    end
  end
  local paths = {}
  for _, pn in ipairs( abbrevs ) do
    local desc = {
      [ "patrol" ] = gname .. "_" .. pn,
    }
    local center_key = pn .. ".center" -- kamp.center
    if more[ center_key ] then
      desc.center = more[ center_key ]
    else
      desc.center = pn
    end
    local task_key = pn .. ".task" -- kamp.task
    if more[ task_key ] then
      desc.task = more[ task_key ]
    elseif level.patrol_path_exists( gname .. "_".. pn .."_task" ) then
      desc.task = pn .. "_task"
    end
    table.insert( paths, desc )
  end
  return paths
end


function dsh_get_guard_paths( gname )
  local abbrevs, more = dsh_read_paths( gname, "guard", { "look" } )
  if not abbrevs then
    abbrevs = {}
    local i = 1
    while level.patrol_path_exists( gname .. "_guard_" .. i .. "_walk" ) do
      table.insert( abbrevs, "guard_" .. i )
      i = i + 1
    end
  end
  local paths = {}
  for _, pn in ipairs( abbrevs ) do
    local desc = {
      [ "patrol" ] = gname .. "_" .. pn .. "_walk",
      [ "walk"   ] = pn .. "_walk",
    }
    local look_key = pn .. ".look" -- guard1.look
    if more[ look_key ] then
      desc.look = more[ look_key ]
    elseif level.patrol_path_exists( gname .. "_".. pn .."_look" ) then
      desc.look = pn .. "_look"
    end
    table.insert( paths, desc )
  end
  return paths
end


function dsh_get_mob_home_paths( gname )
  local props = { "count", "maxr", "minr" }
  local abbrevs, more = dsh_read_paths( gname, "mob_home", props )
  if not abbrevs then
    abbrevs = {}
    local i = 1
    while level.patrol_path_exists( gname .. "_home_" .. i ) do
      table.insert( abbrevs, "home_" .. i )
      i = i + 1
    end
  end
  local paths = {}
  for _, pn in ipairs( abbrevs ) do
    local desc = {
      [ "path_home" ] = pn,
      [ "patrol"    ] = gname .. "_" .. pn,
    }
    for _, k in ipairs( props ) do
      local pkey = pn .. "." .. k
      if more[ pkey ] ~= nil then
        desc[ k ] = more[ pkey ]
      end
    end
    table.insert( paths, desc )
  end
  return paths
end


function dsh_read_paths( gname, pname, subkeys )
  local strn = smart_terrain.get_smart_terrain_by_name( gname )
  ASSERT( strn, "smart_terrain %s not found" )
  local dsh_sect = "dsh.gulag.override." .. gname
  local profile  = strn.dsh_active_profile
  local sect
  if profile then
    sect = dsh_sect .. "." .. profile
  else
    sect = dsh_sect
  end
  local paths
  local more = {}
  if sys_ini:section_exist( sect ) then
    paths = get_string( sect, "dsh_paths." .. pname )
    if paths then
      paths = parse_names( paths )
      if subkeys then
        for _, pn in ipairs( paths ) do
          for _, k in ipairs( subkeys ) do
            k = pn .. "." .. k  -- guard1.look
            local str = get_string(
              sect,
              -- dsh_paths.guard.guard1.look
              "dsh_paths." .. pname .. "." .. k
            )
            if str then more[ k ] = str end
          end
        end
      end
    end
  end
  return paths, more
end
