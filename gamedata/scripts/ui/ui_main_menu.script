-- -*- mode: lua; coding: windows-1251-dos -*-
--/amk_rel_1/
-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:   18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9


class "main_menu" ( CUIScriptWnd )
function main_menu:__init() super()
  self.mbox_mode = 0
  self:InitControls()
  self:InitCallBacks()
  self:InitGameSetupMenu()
  dsh_cfg.on_before_main_menu()
end


function main_menu:InitControls()
  self:Init( 0, 0, 1024, 768 )
  local xml = CScriptXmlInit()
  xml:ParseFile( "ui_mm_main.xml" )

  xml:InitStatic( "back_movie", self )
  xml:InitStatic( "fire_movie", self )
  xml:InitStatic( "background", self )
  self.shniaga = xml:InitMMShniaga( "shniaga_wnd", self );

  self.message_box = CUIMessageBoxEx()
  self:Register( self.message_box, "msg_box" )

  local _ver = xml:InitStatic( "static_version", self )
  local mm   = _G.main_menu.get_main_menu()
  _ver:SetText( mm:GetGSVer() )
  _ver = xml:InitStatic( "mod_version", self )
  local txt = meceniy_utils.read_mod_ver( "txt" )
  _ver:SetText( txt )
end


function main_menu:Show( f )
  self.shniaga:SetVisibleMagnifier( f )
end


function main_menu:InitCallBacks()
  -- new game
  self:AddCallback(
    "btn_novice", ui_events.BUTTON_CLICKED,self.OnButton_new_novice_game, self
  )
  self:AddCallback(
    "btn_stalker", ui_events.BUTTON_CLICKED, self.OnButton_new_stalker_game, self
  )
  self:AddCallback(
    "btn_veteran", ui_events.BUTTON_CLICKED, self.OnButton_new_veteran_game, self
  )
  self:AddCallback(
    "btn_master", ui_events.BUTTON_CLICKED, self.OnButton_new_master_game, self
  )

  self:AddCallback(
    "btn_spawn", ui_events.BUTTON_CLICKED, self.OnButton_load_spawn, self
  )

  -- options
  self:AddCallback(
    "btn_options", ui_events.BUTTON_CLICKED, self.OnButton_options_clicked, self
  )

  -- load
  self:AddCallback(
    "btn_load", ui_events.BUTTON_CLICKED, self.OnButton_load_clicked, self
  )

  -- save
  if
    level.present() and db.actor and db.actor:alive()
    and dsh.allowed_to_save( true, true )
  then
    self:AddCallback(
      "btn_save", ui_events.BUTTON_CLICKED, self.OnButton_save_clicked, self
    )
    self:AddCallback(
      "btn_save_level", ui_events.BUTTON_CLICKED, self.OnButton_save_level_clicked,
      self
    )
  end

  -- quit
  self:AddCallback(
    "btn_quit", ui_events.BUTTON_CLICKED, self.OnButton_quit_clicked, self
  )
  self:AddCallback(
    "btn_quit_to_mm", ui_events.BUTTON_CLICKED, self.OnButton_disconnect_clicked,
    self
  )
  self:AddCallback(
    "btn_ret", ui_events.BUTTON_CLICKED, self.OnButton_return_game, self
  )
  self:AddCallback(
    "btn_lastsave", ui_events.BUTTON_CLICKED, self.OnButton_last_save, self
  )
  self:AddCallback(
    "btn_credits", ui_events.BUTTON_CLICKED, self.OnButton_credits_clicked, self
  )

  -- message box
  self:AddCallback(
    "msg_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgOk, self
  )
  self:AddCallback(
    "msg_box", ui_events.MESSAGE_BOX_CANCEL_CLICKED, self.OnMsgCancel, self
  )
  self:AddCallback(
    "msg_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes, self
  )
  self:AddCallback(
    "msg_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.OnMsgNo, self
  )
  self:AddCallback(
    "msg_box", ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED, self.OnMessageQuitGame,
    self
  )
  self:AddCallback(
    "msg_box", ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED, self.OnMessageQuitWin,
    self
  )

  -- amk
  self:AddCallback(
    "btn_amk", ui_events.BUTTON_CLICKED, self.amk_options, self
  )
end


function main_menu:OnMsgOk()
  self.mbox_mode = 0
end


function main_menu:OnMsgCancel()
  self.mbox_mode = 0
end


function main_menu:OnMsgYes()
  if self.mbox_mode == 1 then
    self:LoadLastSave()
  end
  self.mbox_mode = 0
end


function main_menu:OnMsgNo()
  self.mbox_mode = 0
end


function main_menu:LoadLastSave()
  ui_mm_opt_add.check_options()
  dsh_cfg.on_after_main_menu()
  get_console():execute( "main_menu off" )
  dsh.load_game_internal( dsh.get_save_list()[ 1 ].name )
end


function main_menu:OnButton_last_save()
  if ( not alife() ) or ( not db.actor ) or ( not db.actor:alive() ) then
    self:LoadLastSave();
    return
  end

  self.mbox_mode = 1
  self.message_box:Init( "message_box_confirm_load_save" )
  self:GetHolder():start_stop_menu( self.message_box, true )
end


function main_menu:OnButton_credits_clicked()
  if getFS():exist( "$game_saves$", "credits.ltx" ) then
    game.start_tutorial( "credits_seq" )
  end
end


function main_menu:OnButton_quit_clicked()
  self.message_box:Init( "message_box_quit_windows" )
  self:GetHolder():start_stop_menu( self.message_box, true )
end


function main_menu:OnButton_disconnect_clicked()
  self.message_box:Init( "message_box_quit_game" )
  if level.game_id() ~= 1 then
    -- MultiPlayer
    self.message_box:SetText( "ui_mm_disconnect_message" )
  else
    -- SinglePlayer
    self.message_box:SetText( "ui_mm_quit_game_message" )
  end
  self:GetHolder():start_stop_menu( self.message_box, true )
end


function main_menu:OnMessageQuitGame()
  get_console():execute("disconnect")
end


function main_menu:OnMessageQuitWin()
  archievements.save_gametime()
  ui_mm_opt_add.check_options()
  dsh_cfg.on_after_main_menu()
  get_console():execute( "quit" )
end


function main_menu:OnButton_return_game()
  ui_mm_opt_add.check_options()
  dsh_cfg.on_after_main_menu()
  ogse_night_vision.on_main_menu()
  cmd( "main_menu off" )
  ogse_signals.get_mgr():call( "on_mm_return_game" )
end


function main_menu:OnButton_new_novice_game()
  get_console():execute( "g_game_difficulty gd_novice" )
  self:StartGame()
end


function main_menu:OnButton_new_stalker_game()
  get_console():execute( "g_game_difficulty gd_stalker" )
  self:StartGame()
end


function main_menu:OnButton_new_veteran_game()
  get_console():execute( "g_game_difficulty gd_veteran" )
  self:StartGame()
end


function main_menu:OnButton_new_master_game()
  get_console():execute( "g_game_difficulty gd_master" )
  self:StartGame()
end


function main_menu:StartGame()
  ui_mm_opt_add.check_options()
  dsh_cfg.on_after_main_menu()
  local console = get_console()
  if alife() then
    console:execute( "disconnect" )
  end
  console:execute( "start server(all/single/alife/new) client(localhost)" )
  console:execute( "main_menu off" )
  archievements.on_new_game()
end


function main_menu:OnButton_load_spawn()
  self:OpenDialog( ui_spawn_dialog.spawn_dialog() )
end


function main_menu:OnButton_save_clicked()
  self:OpenDialog( ui_save_dialog.save_dialog() )
end


function main_menu:OnButton_options_clicked()
  local opt_dlg = self:OpenDialog( ui_mm_opt_main.options_dialog() )
  amk_mod.hud_update = true
end


function main_menu:OnButton_load_clicked()
  self:OpenDialog( ui_load_dialog.load_dialog() )
end


function main_menu:OnButton_multiplayer_clicked()
  local mp_dlg = self:OpenDialog( ui_mp_main.mp_main() )
  mp_dlg:UpdateControls()
  get_console():execute( "check_for_updates 0" )
  mp_dlg:OnRadio_NetChanged()
end


function main_menu:OnButton_save_level_clicked()
  if level.present() and db.actor and db.actor:alive() then
    ui_mm_opt_add.check_options()
    dsh_cfg.on_after_main_menu()
    get_console():execute( "main_menu off" )
    u3_utils.savegame_on_level( true )
    ogse_signals.get_mgr():call( "on_mm_return_game" )
  end
end


function main_menu:Dispatch( cmd, param )
  if cmd == 2 then
    self:OnButton_multiplayer_clicked()
  end
  return true
end


local point_count = 0

function main_menu:main_cheat_f3()
  -- Выдадим сообщение о нашем местоположении
  local actor_vid = game_graph():vertex( alife():actor().m_game_vertex_id ):level_id()
  local a    = db.actor:position()        -- Наше положение в координатах
  local vid  = db.actor:level_vertex_id() -- секция уровня
  local gvid = db.actor:game_vertex_id()  -- секция карты
  local text = "Позиция:\\nX= " .. a.x .. "\\nY= " .. a.y .. "\\nZ= " .. a.z
    .. "\\nV= " .. vid .. "\\nG= " .. gvid
    .. "\\nLEVEL= " .. actor_vid
    .. "\\nVALID_LEVEL = " .. tostring( isRegisteredLevel( gvid ) )
  log1( "############################################" )
  log1( "##[waypoint" .. tostring( point_count ) .. "]" )
  log1( "##points = p0" )
  log1( "##p0:name = wp00" )
  log1( "##p0:flags = 0x1" )
  log1( "##p0:position = " .. a.x .. "," .. a.y .. "," .. a.z )
  log1( "##p0:game_vertex_id = " .. gvid )
  log1( "##p0:level_vertex_id = " .. vid )
  log1( "############################################" )
  point_count = point_count + 1
  news_manager.send_tip( db.actor, text, nil, nil, 30000 )
end


-- Метод описан и открыт Malandrinus'om.
function main_menu:personal_test()
  --/* Файл промежуточен, так называемый файл обменный.
  -- В файле дополнительно нужно настроить путь непосредственно к вашему скрипту теста. */
  local res, err = pcall( personal_test_proxy.main )
  log1( res and "~~Succesfull MyTest3 Execution!" or "~~" .. err )
  -- Можно использовать кратко log1(res and "Succesfull_MyTest3_Execution!" or string.gsub(err, " ", "_")), но в данном случае, я приверженец старых методов. Phoenix.
end


function main_menu:OnKeyboard( dik, keyboard_action )
  CUIScriptWnd.OnKeyboard( self, dik, keyboard_action )

  if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
    if dik == DIK_keys.DIK_ESCAPE then
      if level.present() and db.actor and db.actor:alive() then
        ui_mm_opt_add.check_options()
        dsh_cfg.on_after_main_menu()
        ogse_night_vision.on_main_menu()
        cmd( "main_menu", "off" )
        ogse_signals.get_mgr():call( "on_mm_return_game" )
      end

      -- Для универсализации, вызов скрипта персонального.
      -- запускается без проверки alife, ввиду некоторых оссобеностей
      -- функциональной проверки в игре, так-же удален выход из
      -- главного меню, ввиду возможной специфики проводимых тестов.
    elseif dik == DIK_keys.DIK_N and dsh_cfg.get_data().debug_mode then
      self.personal_test()

    elseif dik == DIK_keys.DIK_S then
      if
        level.present() and db.actor and db.actor:alive()
        and dsh.allowed_to_save()
      then
        self:OnButton_save_level_clicked()
      end

    elseif dik == DIK_keys.DIK_L then
      self:OnButton_last_save()

    else
      if level.present() and db.actor and db.actor:alive() then
        -- Показать текущие координаты
        if dik == DIK_keys.DIK_F3 then
          self:main_cheat_f3()
        elseif dik == DIK_keys.DIK_P and dsh_cfg.get_data().debug_mode then
          if not _sdata.GlobalEnable then
            _sdata.subscribe()
          else
            _sdata.unsubscribe()
          end
        end
      end
    end
  end
  return true
end


function main_menu:amk_options()
  self:OpenDialog( ui_amk_options.amk_options() )
end

function main_menu:matants()
  mutant_manager.effector_spa()
end


function main_menu:to_community()
  db.actor:give_info_portion( "val_bandit_talk" )
  db.actor:set_character_community( "stranger", 0, 0 )
end


function main_menu:show_position_informer_window()
  if not db.debug then return end
  self:OpenDialog( positioninformer.pi() )
end


function main_menu:InitGameSetupMenu()
  local f = getFS()
  if not f:exist( "$game_saves$", "game_setup.ltx") then
    -- самый первый запуск, устанавливаем дефолтные значения опций
    cmd( "cfg_save" )
    local f1 = f:update_path( "$app_data_root$", "user.ltx" )
    local f2 = f:update_path( "$game_saves$", "game_setup.ltx" )
    f:file_copy( f1, f2 )
  end
end


function main_menu:OpenDialog( dlg )
  dlg.owner    = self
  self.cur_dlg = dlg
  self:GetHolder():start_stop_menu( self.cur_dlg, true )
  self:GetHolder():start_stop_menu( self,         true )
  return dlg
end


function main_menu:CloseCurDialog()
  self.cur_dlg:GetHolder():start_stop_menu( self, true         )
  self.cur_dlg:GetHolder():start_stop_menu( self.cur_dlg, true )
  self.cur_dlg:ClearCallbacks()
  self.cur_dlg.owner = nil
  self.cur_dlg = nil
end


class "show_start_screen" ( ogse_qt.quick_timer )
function show_start_screen:__init()
  self.counter = 0
end

function show_start_screen:condition()
  self.counter = self.counter + 1
  return self.counter == 2
end

function show_start_screen:action()
  device():pause( true )
end

function start()
  if has_alife_info( "storyline_actor_start" ) then
    show_start_screen():start()
  end
end
