-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_use", fun = this.on_use  })
end


function on_use( obj, sobj )
  local sect = obj:section()
  if
    sect == "arc_art_box_basic"
    or sect == "arc_art_box_8basic"
    or sect == "arc_art_box_1basic"
  then
    show_menu( obj )
    return true
  end
end


function show_menu( obj )
  arc_8containers.set_menu_showed( true )
  local spwn = arc_8container_menu( obj )
  arc_main.set_cur_container_menu( spwn )
  level.start_stop_menu( spwn, true )
end


local _menu
function get_menu()
  return _menu
end


class "arc_8container_menu" ( dsh_ui.dshCUIScriptWnd )
function arc_8container_menu:__init( obj ) super()
  _menu = self

  self.obj = obj
  self:read_params()

  self.xml = CScriptXmlInit()
  self.xml:ParseFile( self.xml_name )
  self:DrawBackground()

  local n = arc_8containers.get_inv_index( obj:id() )
  local t = arc_8containers.get_inv_container( n )
  self.cfg_container  = arc_8containers.get_cfg_container( t.type )
  self.container_type = t.type
  self.cur_cont_index = n
  self:get_container_arts()
  self:get_inventory_arts()
  self.take_buttons   = {}
  self.put_buttons    = {}
  self:UpdateMenu()
end

function arc_8container_menu:__finalize() end


function arc_8container_menu:read_params()
  local prefix = "arc_ui_8container_menu."
  local sect   = self.obj:section()
  self.xml_name = get_string( sect, prefix .. "xml" )
  self.menu_cfg = {}
  for _, k1 in ipairs({ "put", "take" }) do
    local prefix2 = prefix .. k1 .. "."
    local t = {}
    self.menu_cfg[ k1 ] = t
    for _, k2 in ipairs({ "row_size", "space", "x_start", "y_start" }) do
      t[ k2 ] = get_u32( sect, prefix2 .. k2 );
    end
  end
end


function arc_8container_menu:get_container_arts()
  self.container_arts  = arc_8containers.get_inv_container_arts(
    self.cur_cont_index
  )
  self.container_conds = arc_8containers.get_inv_container_conds(
    self.cur_cont_index
  )
  self.container_cds   = arc_8containers.get_inv_container_cds(
    self.cur_cont_index
  )
  self.arts_cont = 0
  table.foreachi(
    self.container_arts,
    function( i, v)
      if v > 0 then self.arts_cont = self.arts_cont + 1 end
    end
  )
end


function arc_8container_menu:get_inventory_arts()
  self.arts_inv       = 0
  self.inventory_arts = {}
  for i = 1, arc_arts.get_cfg_arts_number() do
    local t = arc_arts.get_inv_arts_number( i )
    table.insert( self.inventory_arts, t )
    if t > 0 then self.arts_inv = self.arts_inv + 1 end
  end
end


function arc_8container_menu:UpdateMenu()
  self:DrawButtons()
  self:DrawWeight()
end


function arc_8container_menu:DrawBackground()
  self.xml:InitWindow( "main", 0, self )
  self.xml:InitStatic( "background", self )
  self.xml:InitStatic( "art_box", self )
end


function arc_8container_menu:DrawButtons()
  self.all_arts_weight = 0
  for i = 1, self.cfg_container.slots do
    self:DrawArtButton( self.container_arts[ i ], i )
    if self.container_arts[ i ] > 0 then
      self.all_arts_weight = self.all_arts_weight
        + arc_arts.get_art_weight( self.container_arts[ i ] )
    end
  end

  local btn_pos = 0
  for i = 1, arc_arts.get_cfg_arts_number() do
      if self.inventory_arts[ i ] > 0 then
        btn_pos = btn_pos + 1
      end
      self:DrawArtButton( i, i, self.inventory_arts[ i ], btn_pos )
  end

  local q = self.btn_quit
  if not q then
    self.btn_quit = CUIButton()
    q = self.btn_quit
    q:SetWindowName( "btn_quit" )
    q:SetAutoDelete( true )
    q:SetText( "Закрыть" )
    q:SetTextColor( 255, 238, 153, 26 )
    q:SetFont( GetFontGraffiti19Russian() )
    q:Init( 130, 50, 100, 30 )
    self:AttachChild( q )
    self:dshAddCallback(
      "btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self
    )
  end

  local p = self.btn_prev
  if not p then
    self.btn_prev = CUIButton()
    p = self.btn_prev
    p:SetWindowName( "btn_prev" )
    p:SetAutoDelete( true )
    p:SetText( "<<" )
    p:SetTextColor( 255, 238, 153, 26 )
    p:SetFont( GetFontGraffiti19Russian() )
    p:Init( 50, 50, 50, 30 )
    self:AttachChild( p )
    self:dshAddCallback(
      "btn_prev", ui_events.BUTTON_CLICKED, self.prev_container, self
    )
  end

  local n = self.btn_next
  if not n then
    self.btn_next = CUIButton()
    n = self.btn_next
    n:SetWindowName( "btn_next" )
    n:SetAutoDelete( true )
    n:SetText( ">>" )
    n:SetTextColor( 255, 238, 153, 26 )
    n:SetFont( GetFontGraffiti19Russian() )
    n:Init( 250, 50, 50, 30 )
    self:AttachChild( n )
    self:dshAddCallback(
      "btn_next", ui_events.BUTTON_CLICKED, self.next_container, self
    )
  end

  self.next_cont_idx = 0
  if
    arc_8containers.get_inv_containers_number() > 1
    and self.cur_cont_index < arc_8containers.get_inv_containers_number()
  then
    self.next_cont_idx = arc_8containers.get_inv_index_by_type(
      self.container_type, self.cur_cont_index + 1
    )
  end
  n:Show( self.next_cont_idx > 0 )

  self.prev_cont_idx = 0
  if
    arc_8containers.get_inv_containers_number() > 1
    and self.cur_cont_index > 1
  then
    self.prev_cont_idx = arc_8containers.get_inv_index_by_type(
      self.container_type, self.cur_cont_index - 1, 1
    )
  end
  p:Show( self.prev_cont_idx > 0 )
end


local radiation_v = get_float( "actor_condition", "radiation_v" )

function arc_8container_menu:DrawArtButton( art_index, button_number, multi, btn_pos )
  local btns, bp, s, n, tx, ty, texture_name
  if multi then
    btns = self.put_buttons
    s    = "put"
    n    = art_index
    bp   = btn_pos
  else
    btns = self.take_buttons
    s    = "take"
    n    = button_number
    bp   = n
  end

  local m = self.menu_cfg[ s ]
  local x = m.x_start + ( m.space * math.fmod( bp - 1, m.row_size ) )
  local y = m.y_start + ( m.space * math.floor( ( bp - 1 ) / m.row_size ) )

  local b = btns[ button_number ]
  local t, tx, ty, texture_name
  if ( ( not b ) or ( not multi ) ) and art_index > 0 then
    t = "+" .. arc.round( arc_arts.get_art_inv_rad( art_index ) / radiation_v )
    tx, ty = arc_arts.get_art_texture( art_index )
    tx, ty = 50 * tx, 50 * ty
    texture_name = arc_arts.get_art_texture_name( art_index )
  end

  if not b then                 -- if first time
    btns[ button_number ] = CUIButton()
    b = btns[ button_number ]
    b:SetWindowName( "btn_" .. s .. "_" .. button_number )
    b:SetAutoDelete( true )
    if texture_name then b:InitTexture( texture_name ) end
    b:SetOriginalRect( tx, ty, 50, 50 )
    b:SetText( t )
    b:SetTextColor( 255, 238, 153, 26 )
    b:SetFont( GetFontGraffiti22Russian() )
    b:Init( x, y, 50, 50 )
    self:AttachChild( b )
    self:dshAddCallback(
      b:WindowName(), ui_events.BUTTON_CLICKED,
      loadstring( "arc_ui_8container_menu.btn_" .. s .. "_art( " .. n .. " )" ),
      self
    )

    if multi then
      b.multi = CUIStatic()
      m = b.multi
      m:SetAutoDelete( true )
      m:SetText( "x" .. multi )
      m:Init( 0, 0, 30, 16 )
      b:AttachChild( m )
      m:Show( multi > 1 )
      b:Show( multi > 0 )
    else
      b:Show( art_index > 0 )
    end

  elseif multi ~= nil then      -- if updating put_buttons
    b:SetWndPos( x, y )
    b:Show( multi > 0 )
    m = b.multi
    m:SetText( "x" .. multi )
    m:Show( multi > 1 )

  elseif not multi then         -- if updating take_buttons
    if art_index > 0 then
      b:InitTexture( arc_arts.get_art_texture_name( art_index ) )
      b:SetOriginalRect( tx, ty, 50, 50 )
      b:SetText( t )
    end
    b:Show( art_index > 0 )
  end
end


function arc_8container_menu:DrawWeight()
  local w = self.arts_weight
  if not w then
    self.arts_weight = CUIStatic()
    w = self.arts_weight
    w:SetWindowName( "arts_weight" )
    w:SetAutoDelete( true )
    w:SetTextColor( 255, 238, 153, 26 )
    w:SetFont( GetFontLetterica18Russian() )
    w:Init( 100, 90, 320, 20 )
    self:AttachChild( w )
  end
  w:SetText( string.format( "Вес артефактов: %.2f кг.", self.all_arts_weight ) )
end


function arc_8container_menu:on_quit()
  arc_8containers.respawn_container( self.cur_cont_index )
  self:GetHolder():start_stop_menu( self, true )
  arc_8containers.set_menu_showed( false )
  _menu = nil
  self:dsh_unregister_self()
  arc_main.set_cur_container_menu( false )
end



function arc_8container_menu:OnKeyboard( dik, keyboard_action )
  CUIScriptWnd.OnKeyboard( self, dik, keyboard_action )
  if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
    if dik == DIK_keys.DIK_ESCAPE then
      self:on_quit()
    end
  end
  return true
end


function arc_8container_menu:btn_put_art( art_index )
  if
    self.arts_cont < self.cfg_container.slots
    and self.inventory_arts[ art_index ] > 0
  then
    for i = 1, self.cfg_container.slots do
      if self.container_arts[ i ] == 0 then
        self.container_arts[ i ] = art_index
        self.arts_cont = self.arts_cont + 1
        local cond, cd = arc.remove_item(
          arc_arts.get_art_section( art_index )
        )
        self.container_conds[ i ] = cond
        self.container_cds[   i ] = cd
        local cont_id = arc_8containers.get_inv_container_id(
          self.cur_cont_index
        )
        arc_arts.register_artefact(
          arc_arts.get_art_section( art_index ), 1, cont_id, cond
        )
        local protection = self.cfg_container.protection
        if protection > 0 then
          local art_section = arc_arts.get_art_section( art_index )
          local belt_rad    = get_float(
            art_section, "radiation_restore_speed", 0
          )
          if cond > 0 and belt_rad > protection then
            arc_radiation.change_inv_arts_radiation(
              belt_rad - protection, cont_id
            )
          end
        end
        self.inventory_arts[ art_index ] = self.inventory_arts[ art_index ] - 1
        if self.inventory_arts[ art_index ] == 0 then
          self.arts_inv = self.arts_inv - 1
        end
        self:UpdateMenu()
        return
      end
    end
  end
end


function arc_8container_menu:btn_take_art( slot )
  local a    = self.container_arts[  slot ]
  local cond = self.container_conds[ slot ]
  local cd   = self.container_cds[   slot ]
  if cond and cond == "_" then cond = nil end
  if cd   and cd   == "_" then cd   = nil end
  if a > 0 then
    if self.inventory_arts[ a ] == 0 then
      self.arts_inv = self.arts_inv + 1
    end
    self.inventory_arts[ a ] = self.inventory_arts[ a ] + 1
    self.container_arts[  slot ] = 0
    self.container_conds[ slot ] = nil
    self.container_cds[   slot ] = nil
    self.arts_cont = self.arts_cont - 1
    self:UpdateMenu()
    -- спавн арта
    arc.give_item( arc_arts.get_art_section( a ), cond, cd )
    local cont_id = arc_8containers.get_inv_container_id( self.cur_cont_index )
    arc_arts.register_artefact(
      arc_arts.get_art_section( a ), -1, cont_id, cond
    )
    local protection = self.cfg_container.protection
    if protection > 0 then
      local art_section = arc_arts.get_art_section( a )
      local belt_rad    = get_float( art_section, "radiation_restore_speed", 0 )
      if cond > 0 and belt_rad > protection then
        arc_radiation.change_inv_arts_radiation(
          -( belt_rad - protection ), cont_id
        )
      end
    end
  end
end


function arc_8container_menu:next_container()
  arc_8containers.respawn_container( self.cur_cont_index )
  self.cur_cont_index = self.next_cont_idx
  self:get_container_arts()
  self:UpdateMenu()
end


function arc_8container_menu:prev_container()
  arc_8containers.respawn_container( self.cur_cont_index )
  self.cur_cont_index = self.prev_cont_idx
  self:get_container_arts()
  self:UpdateMenu()
end


function btn_put_art( ... )
  _menu:btn_put_art( ... )
end


function btn_take_art( ... )
  _menu:btn_take_art( ... )
end
