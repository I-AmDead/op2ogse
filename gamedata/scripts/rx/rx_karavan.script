-- -*- mode: lua; coding: windows-1251-dos -*-
----------------------------------------------
-- Karavan simple
-- Схема каравана простая - гг ведет чудиков
-- 2008 - 2009 Rulix aka Bak
----------------------------------------------

class "evaluator_end" ( property_evaluator )
function evaluator_end:__init( name, storage ) super( nil, name )
  self.st = storage
end

function evaluator_end:evaluate()
  return not xr_logic.is_active( self.object, self.st )
end


class "evaluator_karavan" ( property_evaluator )
function evaluator_karavan:__init( name, storage ) super( nil, name )
  self.st = storage
end

function evaluator_karavan:evaluate()
  return db.actor
    and xr_logic.is_active( self.object, self.st )
    and self.st.enabled == true
end


class "action_karavan" ( action_base )
function action_karavan:__init( name, storage ) super( nil, name )
  self.st = storage
end


function action_karavan:initialize()
  action_base.initialize( self )
  local npc = self.object
  npc:set_desired_position()
  npc:set_desired_direction()
  npc:set_detail_path_type( move.curve )
  npc:set_path_type( game_object.level_path )
  self.offset = vector():set(
    math.random( 0, 10 ) - 5, 0, math.random( 0, 10 ) - 5
  )
  self.offset:normalize()
end


function action_karavan:execute()
  action_base.execute( self )
  local npc = self.object

  if xr_logic.try_switch_to_another_section( npc, self.st, db.actor ) then
    return
  end

  local actor_pos = level.vertex_position( db.actor:level_vertex_id() )
  local dist      = actor_pos:distance_to( npc:position() )
  local state, look, anim = state_mgr.get_state( npc )

  if dist <= self.st.close_dist then
    local dp = db.actor:position():distance_to( npc:position() )
    if dp > self.st.close_dist * 2 then
      state, look, anim = self.st.wait_state,  nil, true
    else
      state, look, anim = self.st.close_state, nil, true
    end
  elseif dist <= self.st.near_dist then
    state, look, anim = self.st.near_state,    nil, true
  else
    state, look, anim = self.st.faraway_state, nil, true
  end

  local movement = state_lib.states[ state ].movement
  if movement ~= move.stand then
    local pos = vector():mad( actor_pos, self.offset, self.st.radius )
    local vertex_id = level.vertex_id_by_pos( pos )
    if level.valid_vertex_id( vertex_id ) then
      utils.send_to_nearest_accessible_vertex( npc, vertex_id )
    elseif npc:path_completed() then
      state, look, anim = self.st.wait_state, nil, true
      movement = state_lib.states[ state ].movement
    end
  end

  if self.st.look and movement == move.stand then
    look = true
  end
  if look then
    look = { look_object = db.actor }
  end
  if anim then
    anim = { animation = true }
  end
  state_mgr.set_state( npc, state, nil, nil, look, anim )
end


function action_karavan:finalize()
  self.object:clear_animations()
end


prop_karavan = 9651
prop_end     = prop_karavan + 1
act_karavan  = prop_karavan

function add_to_binder( object, char_ini, scheme, section,st )
  local manager = object:motivation_action_manager()
  manager:add_evaluator(
    prop_karavan, evaluator_karavan( "evaluator_karavan", st )
  )

  local action = action_karavan( "action_karavan", st )
  action:add_precondition( world_property( stalker_ids.property_alive, true ) )
  action:add_precondition( world_property( stalker_ids.property_enemy, false ) )
  action:add_precondition( world_property( stalker_ids.property_danger, false ) )
  xr_motivator.addCommonPrecondition( action )
  if watcher_act then
    action:add_precondition( world_property( watcher_act.evid_near_stuff, false ) )
    action:add_precondition( world_property( watcher_act.evid_see_stuff, false ) )
  end
  action:add_precondition( world_property( prop_karavan, true ) )
  action:add_effect( world_property( prop_karavan, false ) )
  manager:add_action( act_karavan, action )

  local atbl = {
    xr_actions_id.alife,
  }
  for i, id in ipairs( atbl ) do
    action = manager:action( id )
    if action then
      action:add_precondition( world_property( prop_karavan, false ) )
    end
  end

  state_mgr.add_to_idle_preconditions( manager, { prop_karavan } )
end


function set_scheme( npc, ini, scheme, section, gulag_name )
  local st = xr_logic.assign_storage_and_bind( npc, ini, scheme, section )
  st.logic = xr_logic.cfg_get_switch_conditions( ini, section, npc )

  st.close_dist    = utils.cfg_get_number(
    ini,section, "close_dist", npc, false
  ) or 7
  st.near_dist     = utils.cfg_get_number(
    ini, section, "near_dist", npc, false
  ) or 14
  st.faraway_dist  = utils.cfg_get_number(
    ini, section, "faraway_dist", npc, false
  ) or 32
  st.close_state   = utils.cfg_get_string(
    ini, section, "close_state", npc, false, ""
  ) or "guard"
  st.near_state    = utils.cfg_get_string(
    ini, section, "near_state", npc, false, ""
  ) or "rush"
  st.faraway_state = utils.cfg_get_string(
    ini, section, "faraway_state", npc, false, ""
  ) or "sprint"
  st.wait_state    = utils.cfg_get_string(
    ini, section, "wait_state", npc, false, ""
  ) or "hide"
  st.look          = utils.cfg_get_bool(
    ini, section, "look_on_actor", npc, false
  )
  st.radius        = utils.cfg_get_number(
    ini, section, "radius", npc, false
  ) or 4
  st.no_loot       = utils.cfg_get_bool( ini, section, "no_loot", npc, false )
  if st.no_loot ~= true then
    st.no_loot = nil
  end
  st.enabled = true

  st.radius     = math.max( db.actor:radius() * 2 + npc:radius(), st.radius )
  st.close_dist = math.max( st.close_dist, st.radius )
end


function disable_scheme( npc, scheme )
  local st = db.storage[ npc:id() ][ scheme ]
  if st then
    st.enabled = false
  end
end
