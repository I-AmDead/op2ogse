-- -*- mode: lua; coding: windows-1251-dos -*-
----------------------------------------------------------------------------------------------------
-- Walkers
----------------------------------------------------------------------------------------------------
-- Разработчик: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

local broken_path_walk = {
  -- Путь для Макса, где он будет толкать речь перед атакой на группу
  -- Черепа.
  -- [ "mil_freedom_attack_way7_1" ] = {
  --   [ 0 ] = {
  --     [ "sig" ] = "arrive",
  --   }
  -- },
}


function printf()
end

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_walker" (property_evaluator)

function evaluator_need_walker:__init(storage, name) super(nil, name)
  	self.st = storage
end

function evaluator_need_walker:evaluate()
  	return xr_logic.is_active(self.object, self.st)
end

----------------------------------------------------------------------------------------------------------------------
class "action_walker_activity" (action_base)

function action_walker_activity:__init (npc, action_name, storage) super(nil, action_name)
	self.st = storage
	self.move_mgr = db.storage[npc:id()].move_mgr
end


function action_walker_activity:initialize()
  action_base.initialize( self )
  self.object:set_desired_position()
  self.object:set_desired_direction()
  self.initialized = true
  self:reset_scheme( nil, self.object )
end


function action_walker_activity:activate_scheme( loading, npc )
  self:reset_scheme( loading, npc )
end


function action_walker_activity:fix_points()
  local path_walk = patrol( self.st.path_walk )
  local path_look
  if self.st.path_look then
    path_look = patrol( self.st.path_look )
  end
  if not ( path_walk and path_look ) then return end
  local walk_info = self.st.path_walk_info
  local look_info = self.st.path_look_info
  if path_look:count() == 1 then
    if look_info[ 0 ].flags:get() == 0 then
      log2(
        "* [%s]: fix %s:flags[%s] of %s -> 1",
        script_name(), path_look:name( idx ), look_info[ 0 ].flags:get(),
        self.st.path_look
      )
      look_info[ 0 ].flags:assign( 1 )
    end
    for idx = 0, path_walk:count() - 1 do
      if
        path_walk:terminal( idx )
        and walk_info[ idx ].flags:get() ~= look_info[ 0 ].flags:get()
      then
        log2(
          "* [%s]: fix %s:flags[%s] of %s -> %s",
          script_name(), path_walk:name( idx ), walk_info[ idx ].flags:get(),
          self.st.path_walk, look_info[ 0 ].flags:get()
        )
        walk_info[ idx ].flags:assign( look_info[ 0 ].flags:get() )
      end
    end
  elseif path_look:count() > 1 and path_walk:count() == 1 then
    if walk_info[ 0 ].flags:get() == 0 then
      log2(
        "* [%s]: fix %s:flags[%s] of %s -> 1",
        script_name(), path_walk:name( 0 ), walk_info[ 0 ].flags:get(),
        self.st.path_walk
      )
      walk_info[ 0 ].flags:assign( 1 )
    end
    for idx = 0, path_look:count() - 1 do
      if look_info[ idx ].flags:get() ~= walk_info[ 0 ].flags:get() then
        log2(
          "* [%s]: fix %s:flags[%s] of %s -> %s",
          script_name(), path_look:name( idx ), look_info[ idx ].flags:get(),
          self.st.path_look, walk_info[ 0 ].flags:get()
        )
        look_info[ idx ].flags:assign( walk_info[ 0 ].flags:get() )
      end
    end
  end
end


function action_walker_activity:reset_scheme( loading, npc )
  if not self.initialized then return end
  self.st.signals = {}
  if not self.st.path_walk_info then
    self.st.path_walk_info = utils.path_parse_waypoints( self.st.path_walk )
    self:fix_path_walk_info()
  end
  if not self.st.path_look_info then
    self.st.path_look_info = utils.path_parse_waypoints( self.st.path_look )
  end
  self:fix_points()
  self.move_mgr:reset(
    self.st.path_walk, self.st.path_walk_info, self.st.path_look,
    self.st.path_look_info, self.st.team, self.st.suggested_state
  )
  xr_sound.set_sound( npc, self.st.sound_idle )
end


function action_walker_activity:fix_path_walk_info()
  local t = broken_path_walk[ self.st.path_walk ]
  if not t then return end
  log2(
    "[%s]: fix broken path_walk '%s' for %s",
    script_name(), self.st.path_walk, self.object:name()
  )
  for k, v in pairs( t ) do
    for k2, v2 in pairs( v ) do
      self.st.path_walk_info[ k ][ k2 ] = v2
      log2( "[%s]:   point %s: %s = %s", script_name(), k, k2, tostring( v2 ) )
    end
  end
end


function action_walker_activity:execute()
	action_base.execute(self)

	self.move_mgr:update()
	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return
	end
end


function action_walker_activity:finalize()
  self.move_mgr:finalize()
  xr_sound.set_sound( self.object, nil )
  action_base.finalize( self )
  self.initialized = nil
end


----------------------------------------------------------------------------------------------------------------------
--walker binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
		printf("DEBUG: add_to_binder: scheme='%s', section='%s'", scheme, section)
  		local operators	= {}
	  	local properties  = {}

	   	local manager = npc:motivation_action_manager()

		properties["event"] = xr_evaluators_id.reaction
	 	properties["need_walker"] = xr_evaluators_id.zmey_walker_base + 1

	 	operators["action_walker"] = xr_actions_id.zmey_walker_base + 1

	   	-- evaluators
		manager:add_evaluator(properties["need_walker"], this.evaluator_need_walker(storage, "walker_need"))

		local new_action = this.action_walker_activity(npc, "action_walker_activity", storage)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(stalker_ids.property_danger,false))
		new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
		new_action:add_precondition(world_property(stalker_ids.property_anomaly,false))
		new_action:add_precondition(world_property(properties["need_walker"], true))
		xr_motivator.addCommonPrecondition(new_action)
	   	new_action:add_effect(world_property(properties["need_walker"], false))
		manager:add_action(operators["action_walker"], new_action)

		-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
		xr_logic.subscribe_action_for_events(npc, storage, new_action)

	  	new_action = manager:action(xr_actions_id.alife)
	  	new_action:add_precondition(world_property(properties["need_walker"], false))
end

-- Включение схемы
--
-- enabled - включена ли схема
-- path_walk - основной путь, по которому ходит охранник
-- path_look [опционально] - путь, куда смотрит охранник
-- team [опционально] - команда для синхронизации
--
function set_scheme(npc, ini, scheme, section, gulag_name)
	printf("DEBUG: set_scheme: scheme='%s', section='%s'", scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	printf("DEBUG: set_scheme: storage assigned")

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.path_walk = utils.cfg_get_string(ini, section, "path_walk", npc, true,  gulag_name)
	st.path_look = utils.cfg_get_string(ini, section, "path_look", npc, false, gulag_name)
	st.team      = utils.cfg_get_string(ini, section, "team",      npc, false, gulag_name)
	st.sound_idle= utils.cfg_get_string(ini, section, "sound_idle",npc, false, "")

	st.suggested_state = {}
	st.suggested_state.standing = utils.cfg_get_string(ini, section, "def_state_standing", npc, false, "")
	st.suggested_state.moving1 = utils.cfg_get_string(ini, section, "def_state_moving1", npc, false, "")
	st.suggested_state.moving2 = utils.cfg_get_string(ini, section, "def_state_moving2", npc, false, "")
	st.suggested_state.moving3 = utils.cfg_get_string(ini, section, "def_state_moving3", npc, false, "")

	st.path_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
	st.path_look_info = nil -- не загружены.
end
