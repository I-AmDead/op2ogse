-----------------------------------------------------------------------
--- ui_item_effects.script
--- Модуль отображения ножей и биноклей в слотах, работы с фейк-предметами
--- FEAR93, Dusty79, Malandrinus (c) OGS Evolution Team
--- version 6.0 (30/08/2011)
-----------------------------------------------------------------------

local class_to_slot = {
  [ clsid.wpn_knife   ] = 0,
  [ clsid.wpn_knife_s ] = 0,
}


function attach(sm)
  sm:subscribe({ signal = "on_use",          fun = this.on_use  })
  sm:subscribe({ signal = "on_drop",         fun = this.on_drop })
  -- sm:subscribe({ signal = "on_item_to_ruck", fun = this.on_item_to_ruck })
end


function convert_item_to_fake_in_inventory( item )
  if item == nil or alife():object( item:id() ) == nil then return false end
  local fake_obj_section = get_string( item:section(), "fake_item_section" )
  if fake_obj_section then
    return recreate_transfer_data( item, fake_obj_section )
  end
  return false
end


function convert_fake_to_item_in_inventory( item )
  if item == nil or alife():object( item:id() ) == nil then return false end
  local real_obj_section = get_string( item:section(), "real_item_section" )
  if real_obj_section then
    return recreate_transfer_data( item, real_obj_section )
  end
  return false
end


function recreate_transfer_data( obj_to_del, sec_to_create )
  local sobj = alife():object( obj_to_del:id() )
  if not sobj then return false end
  local cond = obj_to_del:condition()
  local item = ogse.spawn_item_in_inv(sec_to_create)
  item[ "ogse_ui_item_effects.locked" ] = true
  wpn_spawn_watcher( item.id, nil, cond ):start()
  alife():release( sobj, true )
  return true
end


function on_use( obj, sobj )
  if sobj == nil then return end
  local real_obj_section = get_string( obj:section(), "real_item_section" )
  if not real_obj_section then return end -- если предмет - фейковый
  -- входит ли слот в число управляемых
  local slot = class_to_slot[ get_class( real_obj_section ) ]
  if not slot then return end -- если входит
  local s_item = db.actor:item_in_slot( slot ) -- есть ли в этом слоте что-то
  if s_item then -- если есть
    -- освобождаем слот, будет сам сконвертирован в фейк в колбеке на попадание
    -- в рюкзак
    db.actor:move_to_ruck( s_item )
  end
  -- создаём в инвентаре реальный объект взамен использованного
  local real_item = ogse.spawn_item_in_inv( real_obj_section )
  real_item[ "ogse_ui_item_effects.locked" ] = true
  wpn_spawn_watcher( real_item.id, slot, obj:condition() ):start()
  return true
end


class "wpn_spawn_watcher" ( ogse_qt.quick_timer )
function wpn_spawn_watcher:__init( id, slot_to_activate, cond ) super()
  self.id   = id
  self.slot = slot_to_activate
  self.cond = cond
end


function wpn_spawn_watcher:condition()
  local obj = level.object_by_id( self.id )
  if obj then
    if self.cond then
      obj:set_condition( self.cond )
      local sobj = alife():object( obj:id() )
      if sobj then
        local iitem = sobj:get_inventory_item()
        ASSERT(
          iitem,
          "[%s]: %s: get_inventory_item() == nil",
          script_name(), sobj:name()
        )
        iitem.item_condition = self.cond
      end
    end
    return true
  end
  return false
end


function wpn_spawn_watcher:action()
  if self.slot then
    local obj = level.object_by_id( self.id )
    ASSERT( obj, "[%s]: id = %s not found", script_name(), self.id )
    db.actor:move_to_slot( obj )
    db.actor:invalidate_inventory()
    update_inventory_window()
  end
end


-- обработка всех выброшенных фейк-предметов
function on_drop( obj, sobj )
  if sobj == nil then return end
  ASSERT( obj, "ogse_ui_item_effects.on_drop: obj is a nil reference")
  local real_obj_section = get_string(
    sobj:section_name(), "real_item_section"
  )
  if not real_obj_section then return end -- если предмет - фейковый
  -- входит ли слот в число управляемых
  local slot = class_to_slot[ get_class( real_obj_section ) ]
  if not slot then return end -- если входит
  if sobj.parent_id == 65535 then
    convert_fake_to_item_on_world( obj, real_obj_section )
  end
  return true
end


function convert_fake_to_item_on_world( obj, real_obj_section )
  local sobj = alife():object( obj:id() )
  local pos  = obj:position()
  local lvid = obj:level_vertex_id()
  local gvid = obj:game_vertex_id()
  local cond = obj:condition()
  alife():release( sobj, true )
  local n_obj = alife():create( real_obj_section, pos, lvid, gvid )
  wpn_spawn_watcher( n_obj.id, nil, cond ):start()
end


-- обработка всех полученных фейк-предметов при открытом инвентаре
function on_item_to_ruck( obj, sobj )
  -- if db.actor:dont_has_info( "ui_inventory" ) then return end
  if sobj == nil then return end
  if sobj[ "ogse_ui_item_effects.locked" ] then
    sobj[ "ogse_ui_item_effects.locked" ] = nil
    return
  end
  ASSERT( obj, "ogse_ui_item_effects.on_item_to_ruck: obj is a nil reference" )
  local sec = obj:section()
  local fake_item_section = get_string( sec, "fake_item_section" )
  if not fake_item_section then return end
  convert_item_to_fake_in_inventory( obj )
  return true
end
